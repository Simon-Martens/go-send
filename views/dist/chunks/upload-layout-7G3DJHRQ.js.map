{
  "version": 3,
  "sources": ["../../src/ui/upload-layout.mjs"],
  "sourcesContent": ["import { translateElement } from \"../utils.mjs\";\n\n/**\n * <upload-layout> - Complete upload flow container\n *\n * Responsibilities:\n * - Encapsulates entire upload state and UI\n * - Manages upload-area and upload-right child components\n * - Handles upload lifecycle (selection \u2192 list \u2192 uploading \u2192 complete)\n * - Forwards events to parent <go-send> element\n *\n * This layout owns the upload state and coordinates between its children.\n */\nclass UploadLayoutElement extends HTMLElement {\n  constructor() {\n    super();\n\n    // Child component references (owned by this layout)\n    this.uploadArea = null;\n    this.uploadRight = null;\n    this.app = null;\n    this._waitingForUploadAreaUpgrade = false;\n    this._waitingForUploadRightUpgrade = false;\n\n    // Upload state\n    this.state = {\n      stage: 'empty',  // 'empty', 'selected', 'uploading', 'complete'\n      files: [],\n      totalSize: 0,\n      progress: 0,\n      uploadedFile: null,  // After successful upload\n    };\n\n    this._postMountFrame = null;\n    this._templateMounted = false;\n    this._handlersBound = false;\n    this._boundHandlers = {\n      addfiles: this.handleAddFiles.bind(this),\n      removeupload: this.handleRemoveUpload.bind(this),\n      upload: this.handleUpload.bind(this),\n      cancel: this.handleCancel.bind(this),\n      completeAcknowledged: this.handleCompleteAcknowledged.bind(this),\n      retry: this.handleRetry.bind(this),\n      errorDismiss: this.handleErrorDismiss.bind(this),\n    };\n  }\n\n  connectedCallback() {\n    if (!this._templateMounted) {\n      const template = document.getElementById(\"upload-layout\");\n      if (!template) {\n        console.error(\"Template #upload-layout not found\");\n        return;\n      }\n\n      const content = template.content.cloneNode(true);\n      this.appendChild(content);\n      this._templateMounted = true;\n    }\n\n    if (this._postMountFrame !== null) {\n      cancelAnimationFrame(this._postMountFrame);\n    }\n\n    this._postMountFrame = requestAnimationFrame(() => {\n      this._postMountFrame = null;\n      if (!this.isConnected) {\n        return;\n      }\n\n      translateElement(this);\n\n      this.uploadArea = this.querySelector(\"upload-area\");\n      this.uploadRight = this.querySelector(\"upload-right\");\n      this.app = this.closest(\"go-send\") || this.app;\n\n      if (!this._handlersBound) {\n        this.addEventListener(\"addfiles\", this._boundHandlers.addfiles);\n        this.addEventListener(\"removeupload\", this._boundHandlers.removeupload);\n        this.addEventListener(\"upload\", this._boundHandlers.upload);\n        this.addEventListener(\"cancel\", this._boundHandlers.cancel);\n        this.addEventListener(\"complete-acknowledged\", this._boundHandlers.completeAcknowledged);\n        this.addEventListener(\"retry\", this._boundHandlers.retry);\n        this.addEventListener(\"error-dismiss\", this._boundHandlers.errorDismiss);\n        this._handlersBound = true;\n      }\n\n      this.refreshArchiveState();\n      this.refreshUploadList();\n    });\n  }\n\n  disconnectedCallback() {\n    if (this._postMountFrame !== null) {\n      cancelAnimationFrame(this._postMountFrame);\n      this._postMountFrame = null;\n    }\n\n    if (this._handlersBound) {\n      this.removeEventListener(\"addfiles\", this._boundHandlers.addfiles);\n      this.removeEventListener(\"removeupload\", this._boundHandlers.removeupload);\n      this.removeEventListener(\"upload\", this._boundHandlers.upload);\n      this.removeEventListener(\"cancel\", this._boundHandlers.cancel);\n      this.removeEventListener(\"complete-acknowledged\", this._boundHandlers.completeAcknowledged);\n      this.removeEventListener(\"retry\", this._boundHandlers.retry);\n      this.removeEventListener(\"error-dismiss\", this._boundHandlers.errorDismiss);\n      this._handlersBound = false;\n    }\n  }\n\n  /**\n   * Event Handlers\n   * These handle events from child components and manage state transitions\n   */\n\n  handleAddFiles(event) {\n    const { files } = event.detail;\n\n    console.log(\"upload-layout: addfiles\", {\n      files,\n      totalSize: files.reduce((sum, f) => sum + f.size, 0),\n    });\n\n    queueMicrotask(() => this.refreshArchiveState());\n  }\n\n  handleRemoveUpload(event) {\n    console.log(\"upload-layout: removeupload\", event.detail);\n\n    queueMicrotask(() => this.refreshArchiveState());\n  }\n\n  handleUpload(event) {\n    // Start upload process\n    this.state.stage = 'uploading';\n\n    // Update UI: force uploading view immediately\n    if (this.uploadArea && typeof this.uploadArea.ensureView === \"function\") {\n      this.uploadArea.ensureView('uploading');\n    }\n\n    console.log(\"upload-layout: starting upload\");\n\n    // Original event will bubble to the controller\n    queueMicrotask(() => this.refreshArchiveState());\n  }\n\n  handleCancel(event) {\n    // Cancel upload and return to file list\n    this.state.stage = 'selected';\n    this.state.progress = 0;\n\n    console.log(\"upload-layout: upload cancelled\");\n\n    // Original event will bubble to the controller\n    this.refreshArchiveState();\n  }\n\n  handleRetry(event) {\n    console.log(\"[UploadLayout] Retry event received from error view\");\n\n    // Clear error and go back to list view\n    if (this.uploadArea && typeof this.uploadArea.clearError === \"function\") {\n      console.log(\"[UploadLayout] Calling uploadArea.clearError()\");\n      this.uploadArea.clearError();\n    } else {\n      console.warn(\"[UploadLayout] uploadArea.clearError not available\", this.uploadArea);\n    }\n\n    this.refreshArchiveState();\n  }\n\n  handleErrorDismiss(event) {\n    console.log(\"[UploadLayout] Error-dismiss event received from error view\");\n\n    // Clear error and clear the archive (go to empty state)\n    if (this.uploadArea && typeof this.uploadArea.clearError === \"function\") {\n      console.log(\"[UploadLayout] Calling uploadArea.clearError()\");\n      this.uploadArea.clearError();\n    } else {\n      console.warn(\"[UploadLayout] uploadArea.clearError not available\", this.uploadArea);\n    }\n\n    // Clear the archive to reset to empty state\n    if (this.app && this.app.state && this.app.state.archive) {\n      console.log(\"[UploadLayout] Clearing archive\");\n      this.app.state.archive.clear();\n    }\n\n    this.refreshArchiveState();\n  }\n\n  handleCompleteAcknowledged(event) {\n    console.log(\"upload-layout: complete acknowledged\");\n\n    // Reset to initial state\n    this.state.stage = 'empty';\n    this.state.uploadedFile = null;\n\n    // Clear the complete state from upload-area\n    if (this.uploadArea && typeof this.uploadArea.clearComplete === \"function\") {\n      this.uploadArea.clearComplete();\n    }\n\n    // Keep showing upload list if files exist\n    this.refreshUploadList();\n  }\n\n  /**\n   * Public Methods (called by parent <go-send> or controller)\n   */\n\n  /**\n   * Update upload progress (called during upload)\n   */\n  updateProgress(ratio, bytesUploaded, totalBytes) {\n    this.state.progress = ratio;\n\n    if (this.uploadArea && typeof this.uploadArea.updateProgress === \"function\") {\n      this.uploadArea.updateProgress(ratio, bytesUploaded, totalBytes);\n    }\n  }\n\n  /**\n   * Mark upload as complete and show share UI\n   */\n  setUploadComplete(ownedFile) {\n    this.state.stage = 'complete';\n    this.state.uploadedFile = ownedFile;\n\n    // Update UI: upload-area shows complete view with QR code and link\n    if (this.uploadArea) {\n      if (typeof this.uploadArea.ensureView === \"function\") {\n        this.uploadArea.ensureView('complete');\n      }\n      if (typeof this.uploadArea.setUploadedFile === \"function\") {\n        this.uploadArea.setUploadedFile(ownedFile);\n      }\n    }\n\n    // Update UI: upload-right shows list with new file\n    this.refreshUploadList();\n\n    console.log(\"upload-layout: upload complete\", ownedFile);\n  }\n\n  /**\n   * Reset to initial state (for new upload)\n   */\n  reset() {\n    this.state = {\n      stage: 'empty',\n      files: [],\n      totalSize: 0,\n      progress: 0,\n      uploadedFile: null,\n    };\n\n    if (this.uploadArea) {\n      if (typeof this.uploadArea.ensureView === \"function\") {\n        this.uploadArea.ensureView('empty');\n      }\n    }\n\n    if (this.uploadRight) {\n      this.uploadRight.showIntro();\n    }\n\n    this.refreshArchiveState();\n  }\n\n  refreshArchiveState() {\n    if (!this.app) {\n      this.app = this.closest(\"go-send\") || this.app;\n    }\n\n    if (!this.app || !this.uploadArea || !this.app.state) {\n      return;\n    }\n\n    if (typeof this.uploadArea.refresh !== \"function\") {\n      if (!this._waitingForUploadAreaUpgrade) {\n        this._waitingForUploadAreaUpgrade = true;\n        customElements\n          .whenDefined(\"upload-area\")\n          .then(() => {\n            this.uploadArea = this.querySelector(\"upload-area\");\n            this._waitingForUploadAreaUpgrade = false;\n            this.refreshArchiveState();\n          })\n          .catch(() => {\n            this._waitingForUploadAreaUpgrade = false;\n          });\n      }\n      return;\n    }\n\n    this.uploadArea.refresh();\n  }\n\n  refreshUploadList() {\n    if (!this.app) {\n      this.app = this.closest(\"go-send\") || this.app;\n    }\n\n    if (!this.app || !this.uploadRight || !this.app.state) {\n      return;\n    }\n\n    // Check if upload-right is fully upgraded\n    if (typeof this.uploadRight.showUploadList !== \"function\") {\n      if (!this._waitingForUploadRightUpgrade) {\n        this._waitingForUploadRightUpgrade = true;\n        customElements\n          .whenDefined(\"upload-right\")\n          .then(() => {\n            this.uploadRight = this.querySelector(\"upload-right\");\n            this._waitingForUploadRightUpgrade = false;\n            this.refreshUploadList();\n          })\n          .catch(() => {\n            this._waitingForUploadRightUpgrade = false;\n          });\n      }\n      return;\n    }\n\n    // Get files from storage\n    const files = this.app.state.storage ? this.app.state.storage.files : [];\n    const activeFiles = files.filter(f => !f.expired);\n\n    // Show list if we have files, otherwise show intro\n    if (activeFiles.length > 0) {\n      if (this.uploadRight.currentTemplate !== \"list\") {\n        this.uploadRight.showUploadList(activeFiles);\n      } else {\n        this.uploadRight.refreshList(activeFiles);\n      }\n    } else {\n      if (this.uploadRight.currentTemplate !== \"intro\") {\n        this.uploadRight.showIntro();\n      }\n    }\n  }\n}\n\n// Register the custom element\ncustomElements.define(\"upload-layout\", UploadLayoutElement);\n"],
  "mappings": ";;;;;;AAaA,IAAM,sBAAN,cAAkC,YAAY;AAAA,EAC5C,cAAc;AACZ,UAAM;AAGN,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,MAAM;AACX,SAAK,+BAA+B;AACpC,SAAK,gCAAgC;AAGrC,SAAK,QAAQ;AAAA,MACX,OAAO;AAAA;AAAA,MACP,OAAO,CAAC;AAAA,MACR,WAAW;AAAA,MACX,UAAU;AAAA,MACV,cAAc;AAAA;AAAA,IAChB;AAEA,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AAAA,MACpB,UAAU,KAAK,eAAe,KAAK,IAAI;AAAA,MACvC,cAAc,KAAK,mBAAmB,KAAK,IAAI;AAAA,MAC/C,QAAQ,KAAK,aAAa,KAAK,IAAI;AAAA,MACnC,QAAQ,KAAK,aAAa,KAAK,IAAI;AAAA,MACnC,sBAAsB,KAAK,2BAA2B,KAAK,IAAI;AAAA,MAC/D,OAAO,KAAK,YAAY,KAAK,IAAI;AAAA,MACjC,cAAc,KAAK,mBAAmB,KAAK,IAAI;AAAA,IACjD;AAAA,EACF;AAAA,EAEA,oBAAoB;AAClB,QAAI,CAAC,KAAK,kBAAkB;AAC1B,YAAM,WAAW,SAAS,eAAe,eAAe;AACxD,UAAI,CAAC,UAAU;AACb,gBAAQ,MAAM,mCAAmC;AACjD;AAAA,MACF;AAEA,YAAM,UAAU,SAAS,QAAQ,UAAU,IAAI;AAC/C,WAAK,YAAY,OAAO;AACxB,WAAK,mBAAmB;AAAA,IAC1B;AAEA,QAAI,KAAK,oBAAoB,MAAM;AACjC,2BAAqB,KAAK,eAAe;AAAA,IAC3C;AAEA,SAAK,kBAAkB,sBAAsB,MAAM;AACjD,WAAK,kBAAkB;AACvB,UAAI,CAAC,KAAK,aAAa;AACrB;AAAA,MACF;AAEA,uBAAiB,IAAI;AAErB,WAAK,aAAa,KAAK,cAAc,aAAa;AAClD,WAAK,cAAc,KAAK,cAAc,cAAc;AACpD,WAAK,MAAM,KAAK,QAAQ,SAAS,KAAK,KAAK;AAE3C,UAAI,CAAC,KAAK,gBAAgB;AACxB,aAAK,iBAAiB,YAAY,KAAK,eAAe,QAAQ;AAC9D,aAAK,iBAAiB,gBAAgB,KAAK,eAAe,YAAY;AACtE,aAAK,iBAAiB,UAAU,KAAK,eAAe,MAAM;AAC1D,aAAK,iBAAiB,UAAU,KAAK,eAAe,MAAM;AAC1D,aAAK,iBAAiB,yBAAyB,KAAK,eAAe,oBAAoB;AACvF,aAAK,iBAAiB,SAAS,KAAK,eAAe,KAAK;AACxD,aAAK,iBAAiB,iBAAiB,KAAK,eAAe,YAAY;AACvE,aAAK,iBAAiB;AAAA,MACxB;AAEA,WAAK,oBAAoB;AACzB,WAAK,kBAAkB;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEA,uBAAuB;AACrB,QAAI,KAAK,oBAAoB,MAAM;AACjC,2BAAqB,KAAK,eAAe;AACzC,WAAK,kBAAkB;AAAA,IACzB;AAEA,QAAI,KAAK,gBAAgB;AACvB,WAAK,oBAAoB,YAAY,KAAK,eAAe,QAAQ;AACjE,WAAK,oBAAoB,gBAAgB,KAAK,eAAe,YAAY;AACzE,WAAK,oBAAoB,UAAU,KAAK,eAAe,MAAM;AAC7D,WAAK,oBAAoB,UAAU,KAAK,eAAe,MAAM;AAC7D,WAAK,oBAAoB,yBAAyB,KAAK,eAAe,oBAAoB;AAC1F,WAAK,oBAAoB,SAAS,KAAK,eAAe,KAAK;AAC3D,WAAK,oBAAoB,iBAAiB,KAAK,eAAe,YAAY;AAC1E,WAAK,iBAAiB;AAAA,IACxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,OAAO;AACpB,UAAM,EAAE,MAAM,IAAI,MAAM;AAExB,YAAQ,IAAI,2BAA2B;AAAA,MACrC;AAAA,MACA,WAAW,MAAM,OAAO,CAAC,KAAK,MAAM,MAAM,EAAE,MAAM,CAAC;AAAA,IACrD,CAAC;AAED,mBAAe,MAAM,KAAK,oBAAoB,CAAC;AAAA,EACjD;AAAA,EAEA,mBAAmB,OAAO;AACxB,YAAQ,IAAI,+BAA+B,MAAM,MAAM;AAEvD,mBAAe,MAAM,KAAK,oBAAoB,CAAC;AAAA,EACjD;AAAA,EAEA,aAAa,OAAO;AAElB,SAAK,MAAM,QAAQ;AAGnB,QAAI,KAAK,cAAc,OAAO,KAAK,WAAW,eAAe,YAAY;AACvE,WAAK,WAAW,WAAW,WAAW;AAAA,IACxC;AAEA,YAAQ,IAAI,gCAAgC;AAG5C,mBAAe,MAAM,KAAK,oBAAoB,CAAC;AAAA,EACjD;AAAA,EAEA,aAAa,OAAO;AAElB,SAAK,MAAM,QAAQ;AACnB,SAAK,MAAM,WAAW;AAEtB,YAAQ,IAAI,iCAAiC;AAG7C,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,YAAY,OAAO;AACjB,YAAQ,IAAI,qDAAqD;AAGjE,QAAI,KAAK,cAAc,OAAO,KAAK,WAAW,eAAe,YAAY;AACvE,cAAQ,IAAI,gDAAgD;AAC5D,WAAK,WAAW,WAAW;AAAA,IAC7B,OAAO;AACL,cAAQ,KAAK,sDAAsD,KAAK,UAAU;AAAA,IACpF;AAEA,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,mBAAmB,OAAO;AACxB,YAAQ,IAAI,6DAA6D;AAGzE,QAAI,KAAK,cAAc,OAAO,KAAK,WAAW,eAAe,YAAY;AACvE,cAAQ,IAAI,gDAAgD;AAC5D,WAAK,WAAW,WAAW;AAAA,IAC7B,OAAO;AACL,cAAQ,KAAK,sDAAsD,KAAK,UAAU;AAAA,IACpF;AAGA,QAAI,KAAK,OAAO,KAAK,IAAI,SAAS,KAAK,IAAI,MAAM,SAAS;AACxD,cAAQ,IAAI,iCAAiC;AAC7C,WAAK,IAAI,MAAM,QAAQ,MAAM;AAAA,IAC/B;AAEA,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,2BAA2B,OAAO;AAChC,YAAQ,IAAI,sCAAsC;AAGlD,SAAK,MAAM,QAAQ;AACnB,SAAK,MAAM,eAAe;AAG1B,QAAI,KAAK,cAAc,OAAO,KAAK,WAAW,kBAAkB,YAAY;AAC1E,WAAK,WAAW,cAAc;AAAA,IAChC;AAGA,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,OAAO,eAAe,YAAY;AAC/C,SAAK,MAAM,WAAW;AAEtB,QAAI,KAAK,cAAc,OAAO,KAAK,WAAW,mBAAmB,YAAY;AAC3E,WAAK,WAAW,eAAe,OAAO,eAAe,UAAU;AAAA,IACjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,WAAW;AAC3B,SAAK,MAAM,QAAQ;AACnB,SAAK,MAAM,eAAe;AAG1B,QAAI,KAAK,YAAY;AACnB,UAAI,OAAO,KAAK,WAAW,eAAe,YAAY;AACpD,aAAK,WAAW,WAAW,UAAU;AAAA,MACvC;AACA,UAAI,OAAO,KAAK,WAAW,oBAAoB,YAAY;AACzD,aAAK,WAAW,gBAAgB,SAAS;AAAA,MAC3C;AAAA,IACF;AAGA,SAAK,kBAAkB;AAEvB,YAAQ,IAAI,kCAAkC,SAAS;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,SAAK,QAAQ;AAAA,MACX,OAAO;AAAA,MACP,OAAO,CAAC;AAAA,MACR,WAAW;AAAA,MACX,UAAU;AAAA,MACV,cAAc;AAAA,IAChB;AAEA,QAAI,KAAK,YAAY;AACnB,UAAI,OAAO,KAAK,WAAW,eAAe,YAAY;AACpD,aAAK,WAAW,WAAW,OAAO;AAAA,MACpC;AAAA,IACF;AAEA,QAAI,KAAK,aAAa;AACpB,WAAK,YAAY,UAAU;AAAA,IAC7B;AAEA,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,sBAAsB;AACpB,QAAI,CAAC,KAAK,KAAK;AACb,WAAK,MAAM,KAAK,QAAQ,SAAS,KAAK,KAAK;AAAA,IAC7C;AAEA,QAAI,CAAC,KAAK,OAAO,CAAC,KAAK,cAAc,CAAC,KAAK,IAAI,OAAO;AACpD;AAAA,IACF;AAEA,QAAI,OAAO,KAAK,WAAW,YAAY,YAAY;AACjD,UAAI,CAAC,KAAK,8BAA8B;AACtC,aAAK,+BAA+B;AACpC,uBACG,YAAY,aAAa,EACzB,KAAK,MAAM;AACV,eAAK,aAAa,KAAK,cAAc,aAAa;AAClD,eAAK,+BAA+B;AACpC,eAAK,oBAAoB;AAAA,QAC3B,CAAC,EACA,MAAM,MAAM;AACX,eAAK,+BAA+B;AAAA,QACtC,CAAC;AAAA,MACL;AACA;AAAA,IACF;AAEA,SAAK,WAAW,QAAQ;AAAA,EAC1B;AAAA,EAEA,oBAAoB;AAClB,QAAI,CAAC,KAAK,KAAK;AACb,WAAK,MAAM,KAAK,QAAQ,SAAS,KAAK,KAAK;AAAA,IAC7C;AAEA,QAAI,CAAC,KAAK,OAAO,CAAC,KAAK,eAAe,CAAC,KAAK,IAAI,OAAO;AACrD;AAAA,IACF;AAGA,QAAI,OAAO,KAAK,YAAY,mBAAmB,YAAY;AACzD,UAAI,CAAC,KAAK,+BAA+B;AACvC,aAAK,gCAAgC;AACrC,uBACG,YAAY,cAAc,EAC1B,KAAK,MAAM;AACV,eAAK,cAAc,KAAK,cAAc,cAAc;AACpD,eAAK,gCAAgC;AACrC,eAAK,kBAAkB;AAAA,QACzB,CAAC,EACA,MAAM,MAAM;AACX,eAAK,gCAAgC;AAAA,QACvC,CAAC;AAAA,MACL;AACA;AAAA,IACF;AAGA,UAAM,QAAQ,KAAK,IAAI,MAAM,UAAU,KAAK,IAAI,MAAM,QAAQ,QAAQ,CAAC;AACvE,UAAM,cAAc,MAAM,OAAO,OAAK,CAAC,EAAE,OAAO;AAGhD,QAAI,YAAY,SAAS,GAAG;AAC1B,UAAI,KAAK,YAAY,oBAAoB,QAAQ;AAC/C,aAAK,YAAY,eAAe,WAAW;AAAA,MAC7C,OAAO;AACL,aAAK,YAAY,YAAY,WAAW;AAAA,MAC1C;AAAA,IACF,OAAO;AACL,UAAI,KAAK,YAAY,oBAAoB,SAAS;AAChD,aAAK,YAAY,UAAU;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AACF;AAGA,eAAe,OAAO,iBAAiB,mBAAmB;",
  "names": []
}
