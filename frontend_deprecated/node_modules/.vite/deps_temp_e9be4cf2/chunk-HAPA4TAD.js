import {
  require_browser,
  require_nanoassert
} from "./chunk-ZGAGZEOQ.js";
import {
  __commonJS
} from "./chunk-5WRI5ZAA.js";

// node_modules/remove-array-items/index.js
var require_remove_array_items = __commonJS({
  "node_modules/remove-array-items/index.js"(exports, module) {
    "use strict";
    module.exports = function removeItems(arr, startIdx, removeCount) {
      var i, length = arr.length;
      if (startIdx >= length || removeCount === 0) {
        return;
      }
      removeCount = startIdx + removeCount > length ? length - startIdx : removeCount;
      var len = length - removeCount;
      for (i = startIdx; i < len; ++i) {
        arr[i] = arr[i + removeCount];
      }
      arr.length = len;
    };
  }
});

// node_modules/nanobus/index.js
var require_nanobus = __commonJS({
  "node_modules/nanobus/index.js"(exports, module) {
    var splice = require_remove_array_items();
    var nanotiming = require_browser();
    var assert = require_nanoassert();
    module.exports = Nanobus;
    function Nanobus(name) {
      if (!(this instanceof Nanobus)) return new Nanobus(name);
      this._name = name || "nanobus";
      this._starListeners = [];
      this._listeners = {};
    }
    Nanobus.prototype.emit = function(eventName) {
      assert.ok(typeof eventName === "string" || typeof eventName === "symbol", "nanobus.emit: eventName should be type string or symbol");
      var data = [];
      for (var i = 1, len = arguments.length; i < len; i++) {
        data.push(arguments[i]);
      }
      var emitTiming = nanotiming(this._name + "('" + eventName.toString() + "')");
      var listeners = this._listeners[eventName];
      if (listeners && listeners.length > 0) {
        this._emit(this._listeners[eventName], data);
      }
      if (this._starListeners.length > 0) {
        this._emit(this._starListeners, eventName, data, emitTiming.uuid);
      }
      emitTiming();
      return this;
    };
    Nanobus.prototype.on = Nanobus.prototype.addListener = function(eventName, listener) {
      assert.ok(typeof eventName === "string" || typeof eventName === "symbol", "nanobus.on: eventName should be type string or symbol");
      assert.equal(typeof listener, "function", "nanobus.on: listener should be type function");
      if (eventName === "*") {
        this._starListeners.push(listener);
      } else {
        if (!this._listeners[eventName]) this._listeners[eventName] = [];
        this._listeners[eventName].push(listener);
      }
      return this;
    };
    Nanobus.prototype.prependListener = function(eventName, listener) {
      assert.ok(typeof eventName === "string" || typeof eventName === "symbol", "nanobus.prependListener: eventName should be type string or symbol");
      assert.equal(typeof listener, "function", "nanobus.prependListener: listener should be type function");
      if (eventName === "*") {
        this._starListeners.unshift(listener);
      } else {
        if (!this._listeners[eventName]) this._listeners[eventName] = [];
        this._listeners[eventName].unshift(listener);
      }
      return this;
    };
    Nanobus.prototype.once = function(eventName, listener) {
      assert.ok(typeof eventName === "string" || typeof eventName === "symbol", "nanobus.once: eventName should be type string or symbol");
      assert.equal(typeof listener, "function", "nanobus.once: listener should be type function");
      var self = this;
      this.on(eventName, once);
      function once() {
        listener.apply(self, arguments);
        self.removeListener(eventName, once);
      }
      return this;
    };
    Nanobus.prototype.prependOnceListener = function(eventName, listener) {
      assert.ok(typeof eventName === "string" || typeof eventName === "symbol", "nanobus.prependOnceListener: eventName should be type string or symbol");
      assert.equal(typeof listener, "function", "nanobus.prependOnceListener: listener should be type function");
      var self = this;
      this.prependListener(eventName, once);
      function once() {
        listener.apply(self, arguments);
        self.removeListener(eventName, once);
      }
      return this;
    };
    Nanobus.prototype.removeListener = function(eventName, listener) {
      assert.ok(typeof eventName === "string" || typeof eventName === "symbol", "nanobus.removeListener: eventName should be type string or symbol");
      assert.equal(typeof listener, "function", "nanobus.removeListener: listener should be type function");
      if (eventName === "*") {
        this._starListeners = this._starListeners.slice();
        return remove(this._starListeners, listener);
      } else {
        if (typeof this._listeners[eventName] !== "undefined") {
          this._listeners[eventName] = this._listeners[eventName].slice();
        }
        return remove(this._listeners[eventName], listener);
      }
      function remove(arr, listener2) {
        if (!arr) return;
        var index = arr.indexOf(listener2);
        if (index !== -1) {
          splice(arr, index, 1);
          return true;
        }
      }
    };
    Nanobus.prototype.removeAllListeners = function(eventName) {
      if (eventName) {
        if (eventName === "*") {
          this._starListeners = [];
        } else {
          this._listeners[eventName] = [];
        }
      } else {
        this._starListeners = [];
        this._listeners = {};
      }
      return this;
    };
    Nanobus.prototype.listeners = function(eventName) {
      var listeners = eventName !== "*" ? this._listeners[eventName] : this._starListeners;
      var ret = [];
      if (listeners) {
        var ilength = listeners.length;
        for (var i = 0; i < ilength; i++) ret.push(listeners[i]);
      }
      return ret;
    };
    Nanobus.prototype._emit = function(arr, eventName, data, uuid) {
      if (typeof arr === "undefined") return;
      if (arr.length === 0) return;
      if (data === void 0) {
        data = eventName;
        eventName = null;
      }
      if (eventName) {
        if (uuid !== void 0) {
          data = [eventName].concat(data, uuid);
        } else {
          data = [eventName].concat(data);
        }
      }
      var length = arr.length;
      for (var i = 0; i < length; i++) {
        var listener = arr[i];
        listener.apply(listener, data);
      }
    };
  }
});

export {
  require_nanobus
};
//# sourceMappingURL=chunk-HAPA4TAD.js.map
