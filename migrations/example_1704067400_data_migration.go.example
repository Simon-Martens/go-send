package migrations

import (
	"github.com/Simon-Martens/go-send/core"
)

// This is an example showing how to do data transformations in migrations
// To use it, remove the .example extension and update the timestamp

func init() {
	// Use current Unix timestamp: date +%s
	Register("1704067400_data_migration_example", up_1704067400_data_migration_example, down_1704067400_data_migration_example)
}

func up_1704067400_data_migration_example(app *core.App) error {
	// Example: Add a new column and populate it with transformed data

	// Step 1: Add the column
	_, err := app.DB.DB().Exec(`
		ALTER TABLE files ADD COLUMN file_size INTEGER DEFAULT 0
	`)
	if err != nil {
		return err
	}

	// Step 2: Query existing data
	rows, err := app.DB.DB().Query(`SELECT id FROM files`)
	if err != nil {
		return err
	}
	defer rows.Close()

	// Step 3: Transform and update data
	updateStmt, err := app.DB.DB().Prepare(`UPDATE files SET file_size = ? WHERE id = ?`)
	if err != nil {
		return err
	}
	defer updateStmt.Close()

	count := 0
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return err
		}

		// Example: Get file size from disk and update
		// In real code, you'd use storage.GetFileSize(id)
		fileSize := int64(0) // placeholder

		if _, err := updateStmt.Exec(fileSize, id); err != nil {
			app.Logger.Error("Failed to update file size", "file_id", id, "error", err)
			continue
		}
		count++
	}

	app.Logger.Info("Migrated file sizes", "updated_count", count)
	return nil
}

func down_1704067400_data_migration_example(app *core.App) error {
	// SQLite doesn't support DROP COLUMN without recreating the table
	// For production, you'd need to implement a full table recreation
	app.Logger.Warn("Rollback for file_size column not implemented (SQLite limitation)")
	return nil
}
