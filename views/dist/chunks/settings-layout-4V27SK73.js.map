{
  "version": 3,
  "sources": ["../../src/ui/settings-layout.mjs"],
  "sourcesContent": ["import storage from \"../storage.mjs\";\nimport UserSecrets, { OWNER_SECRET_VERSION } from \"../userSecrets.mjs\";\nimport { arrayToB64, translate, translateElement } from \"../utils.mjs\";\nimport {\n  DEFAULT_KDF_SETTINGS,\n  deriveKeyMaterial,\n  generateSalt,\n  normalizeKDFSettings,\n  serializeKDFSettings,\n  encodePublicKey,\n  encodeSalt,\n  getPublicKey,\n} from \"../crypto/credentials.mjs\";\nimport { x25519 } from \"@noble/curves/ed25519\";\n\nclass SettingsLayout extends HTMLElement {\n  constructor() {\n    super();\n    this._templateMounted = false;\n    this._categoryButtons = [];\n    this._panels = new Map();\n    this._activeCategory = \"password\";\n    this._boundCategoryClick = this._handleCategoryClick.bind(this);\n    this._boundPasswordSubmit = this._handlePasswordSubmit.bind(this);\n    this._passwordSubmitButton = null;\n    this._passwordStatus = null;\n    this._passwordForm = null;\n  }\n\n  connectedCallback() {\n    if (!this._templateMounted) {\n      const template = document.getElementById(\"settings-layout\");\n      if (!template) {\n        console.error(\"Template #settings-layout not found\");\n        return;\n      }\n      const content = template.content.cloneNode(true);\n      this.appendChild(content);\n      this._templateMounted = true;\n    }\n\n    this._cacheElements();\n    translateElement(this);\n    this._attachListeners();\n    this._selectCategory(this._activeCategory);\n  }\n\n  disconnectedCallback() {\n    this._detachListeners();\n    this._categoryButtons = [];\n    this._panels.clear();\n  }\n\n  _cacheElements() {\n    const categoryList = this.querySelector('[data-role=\"category-list\"]');\n    if (categoryList) {\n      this._categoryButtons = Array.from(\n        categoryList.querySelectorAll(\"[data-category]\"),\n      );\n    }\n\n    const panels = this.querySelectorAll(\"[data-panel]\");\n    this._panels = new Map();\n    panels.forEach((panel) => {\n      this._panels.set(panel.getAttribute(\"data-panel\"), panel);\n    });\n\n    this._passwordForm = this.querySelector('[data-panel=\"password\"] form');\n    this._passwordSubmitButton = this.querySelector('[data-role=\"password-submit\"]');\n    this._passwordStatus = this.querySelector('[data-role=\"password-status\"]');\n    this._passwordStatusIcon = this.querySelector('[data-role=\"password-status-icon\"]');\n    this._passwordStatusText = this.querySelector('[data-role=\"password-status-text\"]');\n  }\n\n  _attachListeners() {\n    this._categoryButtons.forEach((button) => {\n      button.addEventListener(\"click\", this._boundCategoryClick);\n    });\n    if (this._passwordSubmitButton) {\n      this._passwordSubmitButton.addEventListener(\"click\", this._boundPasswordSubmit);\n    }\n  }\n\n  _detachListeners() {\n    this._categoryButtons.forEach((button) => {\n      button.removeEventListener(\"click\", this._boundCategoryClick);\n    });\n    if (this._passwordSubmitButton) {\n      this._passwordSubmitButton.removeEventListener(\"click\", this._boundPasswordSubmit);\n    }\n  }\n\n  _handleCategoryClick(event) {\n    const category = event.currentTarget.getAttribute(\"data-category\");\n    if (category) {\n      this._selectCategory(category);\n    }\n  }\n\n  _selectCategory(category) {\n    this._activeCategory = category;\n    this._updateCategoryStyles();\n    this._updatePanels();\n  }\n\n  _updateCategoryStyles() {\n    this._categoryButtons.forEach((button) => {\n      const isActive =\n        button.getAttribute(\"data-category\") === this._activeCategory;\n\n      button.classList.toggle(\"border-primary\", isActive);\n      button.classList.toggle(\"bg-primary/10\", isActive);\n      button.classList.toggle(\"text-primary\", isActive);\n      button.classList.toggle(\"text-grey-70\", !isActive);\n      button.classList.toggle(\"dark:text-grey-30\", !isActive);\n      button.classList.toggle(\"border-transparent\", !isActive);\n    });\n  }\n\n  _updatePanels() {\n    this._panels.forEach((panel, key) => {\n      if (key === this._activeCategory) {\n        panel.classList.remove(\"hidden\");\n      } else {\n        panel.classList.add(\"hidden\");\n      }\n    });\n  }\n\n  _setPasswordStatus(type, message) {\n    if (!this._passwordStatus) {\n      return;\n    }\n    if (this._passwordStatusText) {\n      this._passwordStatusText.textContent = message || \"\";\n    }\n    this._passwordStatus.className = \"text-sm mt-4 flex items-center gap-2\";\n    if (this._passwordStatusIcon) {\n      this._passwordStatusIcon.className = \"hidden\";\n    }\n    if (!message) {\n      return;\n    }\n    if (type === \"error\") {\n      this._passwordStatus.classList.add(\"text-red-600\", \"dark:text-red-400\");\n      if (this._passwordStatusIcon) {\n        this._passwordStatusIcon.classList.remove(\"hidden\");\n        this._passwordStatusIcon.classList.add(\"ri-close-circle-fill\", \"text-red-600\", \"dark:text-red-400\");\n      }\n    } else if (type === \"success\") {\n      this._passwordStatus.classList.add(\"text-green-600\", \"dark:text-green-400\");\n      if (this._passwordStatusIcon) {\n        this._passwordStatusIcon.classList.remove(\"hidden\");\n        this._passwordStatusIcon.classList.add(\"ri-check-line\", \"text-green-600\", \"dark:text-green-400\");\n      }\n    } else {\n      this._passwordStatus.classList.add(\"text-grey-70\", \"dark:text-grey-40\");\n      if (this._passwordStatusIcon) {\n        this._passwordStatusIcon.classList.remove(\"hidden\");\n        this._passwordStatusIcon.classList.add(\"ri-information-line\", \"text-grey-60\", \"dark:text-grey-40\");\n      }\n    }\n  }\n\n  async _handlePasswordSubmit(event) {\n    event.preventDefault();\n    if (!this._passwordForm) {\n      return;\n    }\n\n    const currentInput = this._passwordForm.querySelector(\"#settings-current-password\");\n    const newInput = this._passwordForm.querySelector(\"#settings-new-password\");\n    const confirmInput = this._passwordForm.querySelector(\"#settings-confirm-password\");\n\n    const currentPassword = currentInput?.value || \"\";\n    const newPassword = newInput?.value || \"\";\n    const confirmPassword = confirmInput?.value || \"\";\n\n    if (currentPassword.length < 10) {\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorCurrent\"));\n      return;\n    }\n    if (newPassword.length < 10) {\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorNewLength\"));\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorMismatch\"));\n      return;\n    }\n\n    const userSecrets = storage.user;\n    if (!userSecrets) {\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorNoSession\"));\n      return;\n    }\n\n    const saltBytes = userSecrets.getSaltBytes();\n    if (!saltBytes || !saltBytes.length) {\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorMissingKeys\"));\n      return;\n    }\n\n    const storedSettings = userSecrets.settings || {};\n    const kdfInput = storedSettings.kdf || storedSettings || DEFAULT_KDF_SETTINGS;\n    const kdfSettings = normalizeKDFSettings(kdfInput);\n\n    let derivedCurrent = null;\n    let newMaterial = null;\n    const newSaltBytes = generateSalt(kdfSettings.saltLength || DEFAULT_KDF_SETTINGS.saltLength);\n\n    try {\n      this._setPasswordStatus(\"info\", translate(\"settingsPasswordStatusInfoDeriving\"));\n      derivedCurrent = await deriveKeyMaterial(currentPassword, saltBytes, kdfSettings);\n\n      const derivedCurrentPublic = x25519.scalarMultBase(derivedCurrent.x25519Seed);\n      const storedPublic = userSecrets.getX25519PublicKey();\n      if (\n        storedPublic &&\n        arrayToB64(derivedCurrentPublic) !== arrayToB64(storedPublic)\n      ) {\n        this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorIncorrect\"));\n        derivedCurrent.edSeed.fill(0);\n        derivedCurrent.x25519Seed.fill(0);\n        return;\n      }\n\n      this._setPasswordStatus(\"info\", translate(\"settingsPasswordStatusInfoPreparing\"));\n      newMaterial = await deriveKeyMaterial(newPassword, newSaltBytes, kdfSettings);\n    } catch (err) {\n      console.error(\"[SettingsLayout] Failed to derive key material\", err);\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorDerive\"));\n      return;\n    } finally {\n      if (derivedCurrent?.edSeed) derivedCurrent.edSeed.fill(0);\n      if (derivedCurrent?.x25519Seed) derivedCurrent.x25519Seed.fill(0);\n    }\n\n    let newEdPublic;\n    let newXPublic;\n    try {\n      newEdPublic = await getPublicKey(newMaterial.edSeed);\n      newXPublic = x25519.scalarMultBase(newMaterial.x25519Seed);\n    } catch (err) {\n      console.error(\"[SettingsLayout] Failed to compute public keys\", err);\n      if (newMaterial?.edSeed) newMaterial.edSeed.fill(0);\n      if (newMaterial?.x25519Seed) newMaterial.x25519Seed.fill(0);\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorPublicKeys\"));\n      return;\n    }\n\n    let newUserSecrets;\n    try {\n      newUserSecrets = UserSecrets.fromKeyMaterial({\n        email: userSecrets.email,\n        name: userSecrets.name,\n        role: userSecrets.role,\n        settings: storedSettings,\n        salt: encodeSalt(newSaltBytes),\n        x25519Seed: newMaterial.x25519Seed,\n        x25519PublicKey: newXPublic,\n        version: userSecrets.version,\n      });\n    } catch (err) {\n      console.error(\"[SettingsLayout] Failed to prepare new user secrets\", err);\n      if (newMaterial?.edSeed) newMaterial.edSeed.fill(0);\n      if (newMaterial?.x25519Seed) newMaterial.x25519Seed.fill(0);\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorUserSecrets\"));\n      return;\n    }\n\n    const fileUpdates = [];\n    try {\n      const files = storage.files || [];\n      for (const ownedFile of files) {\n        if (!ownedFile?.id || !ownedFile.keychain?.rawSecret) {\n          continue;\n        }\n        const wrap = await newUserSecrets.wrapSecret(ownedFile.keychain.rawSecret);\n        fileUpdates.push({\n          id: ownedFile.id,\n          ciphertext: wrap.ciphertext,\n          nonce: wrap.nonce,\n          ephemeral_pub: wrap.ephemeralPublicKey,\n          version: wrap.version || OWNER_SECRET_VERSION,\n        });\n      }\n    } catch (err) {\n      console.error(\"[SettingsLayout] Failed to re-wrap secrets\", err);\n      if (newMaterial?.edSeed) newMaterial.edSeed.fill(0);\n      if (newMaterial?.x25519Seed) newMaterial.x25519Seed.fill(0);\n      this._setPasswordStatus(\"error\", translate(\"settingsPasswordStatusErrorWrap\"));\n      return;\n    }\n\n    const payload = {\n      current_password: currentPassword,\n      new_salt: encodeSalt(newSaltBytes),\n      new_public_key: encodePublicKey(newEdPublic),\n      new_encryption_public_key: arrayToB64(newXPublic),\n      files: fileUpdates,\n      kdf: serializeKDFSettings(kdfSettings),\n    };\n\n    this._setPasswordStatus(\"info\", translate(\"settingsPasswordStatusInfoUpdating\"));\n    if (this._passwordSubmitButton) {\n      this._passwordSubmitButton.disabled = true;\n    }\n\n    try {\n      const response = await fetch(\"/api/passwordreset\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        let serverError = \"\";\n        try {\n          serverError = await response.text();\n        } catch {\n          // ignore parsing errors\n        }\n        console.error(\"[SettingsLayout] Password reset failed\", response.status, serverError);\n        const message = serverError || translate(\"settingsPasswordStatusErrorRequest\");\n        throw new Error(message);\n      }\n\n      storage.setUser(newUserSecrets);\n      this._setPasswordStatus(\"success\", translate(\"settingsPasswordStatusSuccess\"));\n      if (currentInput) currentInput.value = \"\";\n      if (newInput) newInput.value = \"\";\n      if (confirmInput) confirmInput.value = \"\";\n    } catch (err) {\n      const fallback = translate(\"settingsPasswordStatusErrorGeneric\");\n      const message = err?.message || fallback;\n      this._setPasswordStatus(\"error\", message);\n    } finally {\n      if (newMaterial?.edSeed) newMaterial.edSeed.fill(0);\n      if (newMaterial?.x25519Seed) newMaterial.x25519Seed.fill(0);\n      if (this._passwordSubmitButton) {\n        this._passwordSubmitButton.disabled = false;\n      }\n    }\n  }\n}\n\ncustomElements.define(\"settings-layout\", SettingsLayout);\n"],
  "mappings": "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",
  "names": []
}
