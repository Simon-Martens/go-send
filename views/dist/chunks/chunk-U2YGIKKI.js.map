{
  "version": 3,
  "sources": ["../../src/qrcode.mjs"],
  "sourcesContent": ["//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n\nvar qrcode = (function () {\n  //---------------------------------------------------------------------\n  // qrcode\n  //---------------------------------------------------------------------\n\n  /**\n   * qrcode\n   * @param typeNumber 1 to 40\n   * @param errorCorrectionLevel 'L','M','Q','H'\n   */\n  var qrcode = function (typeNumber, errorCorrectionLevel) {\n    var PAD0 = 0xec;\n    var PAD1 = 0x11;\n\n    var _typeNumber = typeNumber;\n    var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n    var _modules = null;\n    var _moduleCount = 0;\n    var _dataCache = null;\n    var _dataList = [];\n\n    var _this = {};\n\n    var makeImpl = function (test, maskPattern) {\n      _moduleCount = _typeNumber * 4 + 17;\n      _modules = (function (moduleCount) {\n        var modules = new Array(moduleCount);\n        for (var row = 0; row < moduleCount; row += 1) {\n          modules[row] = new Array(moduleCount);\n          for (var col = 0; col < moduleCount; col += 1) {\n            modules[row][col] = null;\n          }\n        }\n        return modules;\n      })(_moduleCount);\n\n      setupPositionProbePattern(0, 0);\n      setupPositionProbePattern(_moduleCount - 7, 0);\n      setupPositionProbePattern(0, _moduleCount - 7);\n      setupPositionAdjustPattern();\n      setupTimingPattern();\n      setupTypeInfo(test, maskPattern);\n\n      if (_typeNumber >= 7) {\n        setupTypeNumber(test);\n      }\n\n      if (_dataCache == null) {\n        _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n      }\n\n      mapData(_dataCache, maskPattern);\n    };\n\n    var setupPositionProbePattern = function (row, col) {\n      for (var r = -1; r <= 7; r += 1) {\n        if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n        for (var c = -1; c <= 7; c += 1) {\n          if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n          if (\n            (0 <= r && r <= 6 && (c == 0 || c == 6)) ||\n            (0 <= c && c <= 6 && (r == 0 || r == 6)) ||\n            (2 <= r && r <= 4 && 2 <= c && c <= 4)\n          ) {\n            _modules[row + r][col + c] = true;\n          } else {\n            _modules[row + r][col + c] = false;\n          }\n        }\n      }\n    };\n\n    var getBestMaskPattern = function () {\n      var minLostPoint = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < 8; i += 1) {\n        makeImpl(true, i);\n\n        var lostPoint = QRUtil.getLostPoint(_this);\n\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n\n      return pattern;\n    };\n\n    var setupTimingPattern = function () {\n      for (var r = 8; r < _moduleCount - 8; r += 1) {\n        if (_modules[r][6] != null) {\n          continue;\n        }\n        _modules[r][6] = r % 2 == 0;\n      }\n\n      for (var c = 8; c < _moduleCount - 8; c += 1) {\n        if (_modules[6][c] != null) {\n          continue;\n        }\n        _modules[6][c] = c % 2 == 0;\n      }\n    };\n\n    var setupPositionAdjustPattern = function () {\n      var pos = QRUtil.getPatternPosition(_typeNumber);\n\n      for (var i = 0; i < pos.length; i += 1) {\n        for (var j = 0; j < pos.length; j += 1) {\n          var row = pos[i];\n          var col = pos[j];\n\n          if (_modules[row][col] != null) {\n            continue;\n          }\n\n          for (var r = -2; r <= 2; r += 1) {\n            for (var c = -2; c <= 2; c += 1) {\n              if (\n                r == -2 ||\n                r == 2 ||\n                c == -2 ||\n                c == 2 ||\n                (r == 0 && c == 0)\n              ) {\n                _modules[row + r][col + c] = true;\n              } else {\n                _modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    var setupTypeNumber = function (test) {\n      var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && ((bits >> i) & 1) == 1;\n        _modules[Math.floor(i / 3)][(i % 3) + _moduleCount - 8 - 3] = mod;\n      }\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && ((bits >> i) & 1) == 1;\n        _modules[(i % 3) + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    };\n\n    var setupTypeInfo = function (test, maskPattern) {\n      var data = (_errorCorrectionLevel << 3) | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n\n      // vertical\n      for (var i = 0; i < 15; i += 1) {\n        var mod = !test && ((bits >> i) & 1) == 1;\n\n        if (i < 6) {\n          _modules[i][8] = mod;\n        } else if (i < 8) {\n          _modules[i + 1][8] = mod;\n        } else {\n          _modules[_moduleCount - 15 + i][8] = mod;\n        }\n      }\n\n      // horizontal\n      for (var i = 0; i < 15; i += 1) {\n        var mod = !test && ((bits >> i) & 1) == 1;\n\n        if (i < 8) {\n          _modules[8][_moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          _modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          _modules[8][15 - i - 1] = mod;\n        }\n      }\n\n      // fixed module\n      _modules[_moduleCount - 8][8] = !test;\n    };\n\n    var mapData = function (data, maskPattern) {\n      var inc = -1;\n      var row = _moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      var maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n      for (var col = _moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col -= 1;\n\n        while (true) {\n          for (var c = 0; c < 2; c += 1) {\n            if (_modules[row][col - c] == null) {\n              var dark = false;\n\n              if (byteIndex < data.length) {\n                dark = ((data[byteIndex] >>> bitIndex) & 1) == 1;\n              }\n\n              var mask = maskFunc(row, col - c);\n\n              if (mask) {\n                dark = !dark;\n              }\n\n              _modules[row][col - c] = dark;\n              bitIndex -= 1;\n\n              if (bitIndex == -1) {\n                byteIndex += 1;\n                bitIndex = 7;\n              }\n            }\n          }\n\n          row += inc;\n\n          if (row < 0 || _moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    };\n\n    var createBytes = function (buffer, rsBlocks) {\n      var offset = 0;\n\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n\n      for (var r = 0; r < rsBlocks.length; r += 1) {\n        var dcCount = rsBlocks[r].dataCount;\n        var ecCount = rsBlocks[r].totalCount - dcCount;\n\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n\n        dcdata[r] = new Array(dcCount);\n\n        for (var i = 0; i < dcdata[r].length; i += 1) {\n          dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n        }\n        offset += dcCount;\n\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i += 1) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n        }\n      }\n\n      var totalCodeCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalCodeCount += rsBlocks[i].totalCount;\n      }\n\n      var data = new Array(totalCodeCount);\n      var index = 0;\n\n      for (var i = 0; i < maxDcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < dcdata[r].length) {\n            data[index] = dcdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      for (var i = 0; i < maxEcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < ecdata[r].length) {\n            data[index] = ecdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      return data;\n    };\n\n    var createData = function (typeNumber, errorCorrectionLevel, dataList) {\n      var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n\n      var buffer = qrBitBuffer();\n\n      for (var i = 0; i < dataList.length; i += 1) {\n        var data = dataList[i];\n        buffer.put(data.getMode(), 4);\n        buffer.put(\n          data.getLength(),\n          QRUtil.getLengthInBits(data.getMode(), typeNumber),\n        );\n        data.write(buffer);\n      }\n\n      // calc num max data.\n      var totalDataCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      if (buffer.getLengthInBits() > totalDataCount * 8) {\n        throw (\n          \"code length overflow. (\" +\n          buffer.getLengthInBits() +\n          \">\" +\n          totalDataCount * 8 +\n          \")\"\n        );\n      }\n\n      // end code\n      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n\n      // padding\n      while (buffer.getLengthInBits() % 8 != 0) {\n        buffer.putBit(false);\n      }\n\n      // padding\n      while (true) {\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD0, 8);\n\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD1, 8);\n      }\n\n      return createBytes(buffer, rsBlocks);\n    };\n\n    _this.addData = function (data, mode) {\n      mode = mode || \"Byte\";\n\n      var newData = null;\n\n      switch (mode) {\n        case \"Numeric\":\n          newData = qrNumber(data);\n          break;\n        case \"Alphanumeric\":\n          newData = qrAlphaNum(data);\n          break;\n        case \"Byte\":\n          newData = qr8BitByte(data);\n          break;\n        case \"Kanji\":\n          newData = qrKanji(data);\n          break;\n        default:\n          throw \"mode:\" + mode;\n      }\n\n      _dataList.push(newData);\n      _dataCache = null;\n    };\n\n    _this.isDark = function (row, col) {\n      if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n        throw row + \",\" + col;\n      }\n      return _modules[row][col];\n    };\n\n    _this.getModuleCount = function () {\n      return _moduleCount;\n    };\n\n    _this.make = function () {\n      if (_typeNumber < 1) {\n        var typeNumber = 1;\n\n        for (; typeNumber < 40; typeNumber++) {\n          var rsBlocks = QRRSBlock.getRSBlocks(\n            typeNumber,\n            _errorCorrectionLevel,\n          );\n          var buffer = qrBitBuffer();\n\n          for (var i = 0; i < _dataList.length; i++) {\n            var data = _dataList[i];\n            buffer.put(data.getMode(), 4);\n            buffer.put(\n              data.getLength(),\n              QRUtil.getLengthInBits(data.getMode(), typeNumber),\n            );\n            data.write(buffer);\n          }\n\n          var totalDataCount = 0;\n          for (var i = 0; i < rsBlocks.length; i++) {\n            totalDataCount += rsBlocks[i].dataCount;\n          }\n\n          if (buffer.getLengthInBits() <= totalDataCount * 8) {\n            break;\n          }\n        }\n\n        _typeNumber = typeNumber;\n      }\n\n      makeImpl(false, getBestMaskPattern());\n    };\n\n    _this.createTableTag = function (cellSize, margin) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n\n      var qrHtml = \"\";\n\n      qrHtml += '<table style=\"';\n      qrHtml += \" border-width: 0px; border-style: none;\";\n      qrHtml += \" border-collapse: collapse;\";\n      qrHtml += \" padding: 0px; margin: \" + margin + \"px;\";\n      qrHtml += '\">';\n      qrHtml += \"<tbody>\";\n\n      for (var r = 0; r < _this.getModuleCount(); r += 1) {\n        qrHtml += \"<tr>\";\n\n        for (var c = 0; c < _this.getModuleCount(); c += 1) {\n          qrHtml += '<td style=\"';\n          qrHtml += \" border-width: 0px; border-style: none;\";\n          qrHtml += \" border-collapse: collapse;\";\n          qrHtml += \" padding: 0px; margin: 0px;\";\n          qrHtml += \" width: \" + cellSize + \"px;\";\n          qrHtml += \" height: \" + cellSize + \"px;\";\n          qrHtml += \" background-color: \";\n          qrHtml += _this.isDark(r, c) ? \"#000000\" : \"#ffffff\";\n          qrHtml += \";\";\n          qrHtml += '\"/>';\n        }\n\n        qrHtml += \"</tr>\";\n      }\n\n      qrHtml += \"</tbody>\";\n      qrHtml += \"</table>\";\n\n      return qrHtml;\n    };\n\n    _this.createSvgTag = function (cellSize, margin, alt, title) {\n      var opts = {};\n      if (typeof arguments[0] == \"object\") {\n        // Called by options.\n        opts = arguments[0];\n        // overwrite cellSize and margin.\n        cellSize = opts.cellSize;\n        margin = opts.margin;\n        alt = opts.alt;\n        title = opts.title;\n      }\n\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n\n      // Compose alt property surrogate\n      alt = typeof alt === \"string\" ? { text: alt } : alt || {};\n      alt.text = alt.text || null;\n      alt.id = alt.text ? alt.id || \"qrcode-description\" : null;\n\n      // Compose title property surrogate\n      title = typeof title === \"string\" ? { text: title } : title || {};\n      title.text = title.text || null;\n      title.id = title.text ? title.id || \"qrcode-title\" : null;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var c,\n        mc,\n        r,\n        mr,\n        qrSvg = \"\",\n        rect;\n\n      rect =\n        \"l\" +\n        cellSize +\n        \",0 0,\" +\n        cellSize +\n        \" -\" +\n        cellSize +\n        \",0 0,-\" +\n        cellSize +\n        \"z \";\n\n      qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n      qrSvg += !opts.scalable\n        ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"'\n        : \"\";\n      qrSvg += ' viewBox=\"0 0 ' + size + \" \" + size + '\" ';\n      qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n      qrSvg +=\n        title.text || alt.text\n          ? ' role=\"img\" aria-labelledby=\"' +\n            escapeXml([title.id, alt.id].join(\" \").trim()) +\n            '\"'\n          : \"\";\n      qrSvg += \">\";\n      qrSvg += title.text\n        ? '<title id=\"' +\n          escapeXml(title.id) +\n          '\">' +\n          escapeXml(title.text) +\n          \"</title>\"\n        : \"\";\n      qrSvg += alt.text\n        ? '<description id=\"' +\n          escapeXml(alt.id) +\n          '\">' +\n          escapeXml(alt.text) +\n          \"</description>\"\n        : \"\";\n      qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n      qrSvg += '<path d=\"';\n\n      for (r = 0; r < _this.getModuleCount(); r += 1) {\n        mr = r * cellSize + margin;\n        for (c = 0; c < _this.getModuleCount(); c += 1) {\n          if (_this.isDark(r, c)) {\n            mc = c * cellSize + margin;\n            qrSvg += \"M\" + mc + \",\" + mr + rect;\n          }\n        }\n      }\n\n      qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n      qrSvg += \"</svg>\";\n\n      return qrSvg;\n    };\n\n    _this.createDataURL = function (cellSize, margin) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n\n      return createDataURL(size, size, function (x, y) {\n        if (min <= x && x < max && min <= y && y < max) {\n          var c = Math.floor((x - min) / cellSize);\n          var r = Math.floor((y - min) / cellSize);\n          return _this.isDark(r, c) ? 0 : 1;\n        } else {\n          return 1;\n        }\n      });\n    };\n\n    _this.createImgTag = function (cellSize, margin, alt) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n\n      var img = \"\";\n      img += \"<img\";\n      img += '\\u0020src=\"';\n      img += _this.createDataURL(cellSize, margin);\n      img += '\"';\n      img += '\\u0020width=\"';\n      img += size;\n      img += '\"';\n      img += '\\u0020height=\"';\n      img += size;\n      img += '\"';\n      if (alt) {\n        img += '\\u0020alt=\"';\n        img += escapeXml(alt);\n        img += '\"';\n      }\n      img += \"/>\";\n\n      return img;\n    };\n\n    var escapeXml = function (s) {\n      var escaped = \"\";\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charAt(i);\n        switch (c) {\n          case \"<\":\n            escaped += \"&lt;\";\n            break;\n          case \">\":\n            escaped += \"&gt;\";\n            break;\n          case \"&\":\n            escaped += \"&amp;\";\n            break;\n          case '\"':\n            escaped += \"&quot;\";\n            break;\n          default:\n            escaped += c;\n            break;\n        }\n      }\n      return escaped;\n    };\n\n    var _createHalfASCII = function (margin) {\n      var cellSize = 1;\n      margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n\n      var y, x, r1, r2, p;\n\n      var blocks = {\n        \"\u2588\u2588\": \"\u2588\",\n        \"\u2588 \": \"\u2580\",\n        \" \u2588\": \"\u2584\",\n        \"  \": \" \",\n      };\n\n      var blocksLastLineNoMargin = {\n        \"\u2588\u2588\": \"\u2580\",\n        \"\u2588 \": \"\u2580\",\n        \" \u2588\": \" \",\n        \"  \": \" \",\n      };\n\n      var ascii = \"\";\n      for (y = 0; y < size; y += 2) {\n        r1 = Math.floor((y - min) / cellSize);\n        r2 = Math.floor((y + 1 - min) / cellSize);\n        for (x = 0; x < size; x += 1) {\n          p = \"\u2588\";\n\n          if (\n            min <= x &&\n            x < max &&\n            min <= y &&\n            y < max &&\n            _this.isDark(r1, Math.floor((x - min) / cellSize))\n          ) {\n            p = \" \";\n          }\n\n          if (\n            min <= x &&\n            x < max &&\n            min <= y + 1 &&\n            y + 1 < max &&\n            _this.isDark(r2, Math.floor((x - min) / cellSize))\n          ) {\n            p += \" \";\n          } else {\n            p += \"\u2588\";\n          }\n\n          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n          ascii +=\n            margin < 1 && y + 1 >= max ? blocksLastLineNoMargin[p] : blocks[p];\n        }\n\n        ascii += \"\\n\";\n      }\n\n      if (size % 2 && margin > 0) {\n        return (\n          ascii.substring(0, ascii.length - size - 1) +\n          Array(size + 1).join(\"\u2580\")\n        );\n      }\n\n      return ascii.substring(0, ascii.length - 1);\n    };\n\n    _this.createASCII = function (cellSize, margin) {\n      cellSize = cellSize || 1;\n\n      if (cellSize < 2) {\n        return _createHalfASCII(margin);\n      }\n\n      cellSize -= 1;\n      margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n\n      var y, x, r, p;\n\n      var white = Array(cellSize + 1).join(\"\u2588\u2588\");\n      var black = Array(cellSize + 1).join(\"  \");\n\n      var ascii = \"\";\n      var line = \"\";\n      for (y = 0; y < size; y += 1) {\n        r = Math.floor((y - min) / cellSize);\n        line = \"\";\n        for (x = 0; x < size; x += 1) {\n          p = 1;\n\n          if (\n            min <= x &&\n            x < max &&\n            min <= y &&\n            y < max &&\n            _this.isDark(r, Math.floor((x - min) / cellSize))\n          ) {\n            p = 0;\n          }\n\n          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n          line += p ? white : black;\n        }\n\n        for (r = 0; r < cellSize; r += 1) {\n          ascii += line + \"\\n\";\n        }\n      }\n\n      return ascii.substring(0, ascii.length - 1);\n    };\n\n    _this.renderTo2dContext = function (context, cellSize) {\n      cellSize = cellSize || 2;\n      var length = _this.getModuleCount();\n      for (var row = 0; row < length; row++) {\n        for (var col = 0; col < length; col++) {\n          context.fillStyle = _this.isDark(row, col) ? \"black\" : \"white\";\n          context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n        }\n      }\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrcode.stringToBytes\n  //---------------------------------------------------------------------\n\n  qrcode.stringToBytesFuncs = {\n    default: function (s) {\n      var bytes = [];\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        bytes.push(c & 0xff);\n      }\n      return bytes;\n    },\n  };\n\n  qrcode.stringToBytes = qrcode.stringToBytesFuncs[\"default\"];\n\n  //---------------------------------------------------------------------\n  // qrcode.createStringToBytes\n  //---------------------------------------------------------------------\n\n  /**\n   * @param unicodeData base64 string of byte array.\n   * [16bit Unicode],[16bit Bytes], ...\n   * @param numChars\n   */\n  qrcode.createStringToBytes = function (unicodeData, numChars) {\n    // create conversion map.\n\n    var unicodeMap = (function () {\n      var bin = base64DecodeInputStream(unicodeData);\n      var read = function () {\n        var b = bin.read();\n        if (b == -1) throw \"eof\";\n        return b;\n      };\n\n      var count = 0;\n      var unicodeMap = {};\n      while (true) {\n        var b0 = bin.read();\n        if (b0 == -1) break;\n        var b1 = read();\n        var b2 = read();\n        var b3 = read();\n        var k = String.fromCharCode((b0 << 8) | b1);\n        var v = (b2 << 8) | b3;\n        unicodeMap[k] = v;\n        count += 1;\n      }\n      if (count != numChars) {\n        throw count + \" != \" + numChars;\n      }\n\n      return unicodeMap;\n    })();\n\n    var unknownChar = \"?\".charCodeAt(0);\n\n    return function (s) {\n      var bytes = [];\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        if (c < 128) {\n          bytes.push(c);\n        } else {\n          var b = unicodeMap[s.charAt(i)];\n          if (typeof b == \"number\") {\n            if ((b & 0xff) == b) {\n              // 1byte\n              bytes.push(b);\n            } else {\n              // 2bytes\n              bytes.push(b >>> 8);\n              bytes.push(b & 0xff);\n            }\n          } else {\n            bytes.push(unknownChar);\n          }\n        }\n      }\n      return bytes;\n    };\n  };\n\n  //---------------------------------------------------------------------\n  // QRMode\n  //---------------------------------------------------------------------\n\n  var QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3,\n  };\n\n  //---------------------------------------------------------------------\n  // QRErrorCorrectionLevel\n  //---------------------------------------------------------------------\n\n  var QRErrorCorrectionLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2,\n  };\n\n  //---------------------------------------------------------------------\n  // QRMaskPattern\n  //---------------------------------------------------------------------\n\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7,\n  };\n\n  //---------------------------------------------------------------------\n  // QRUtil\n  //---------------------------------------------------------------------\n\n  var QRUtil = (function () {\n    var PATTERN_POSITION_TABLE = [\n      [],\n      [6, 18],\n      [6, 22],\n      [6, 26],\n      [6, 30],\n      [6, 34],\n      [6, 22, 38],\n      [6, 24, 42],\n      [6, 26, 46],\n      [6, 28, 50],\n      [6, 30, 54],\n      [6, 32, 58],\n      [6, 34, 62],\n      [6, 26, 46, 66],\n      [6, 26, 48, 70],\n      [6, 26, 50, 74],\n      [6, 30, 54, 78],\n      [6, 30, 56, 82],\n      [6, 30, 58, 86],\n      [6, 34, 62, 90],\n      [6, 28, 50, 72, 94],\n      [6, 26, 50, 74, 98],\n      [6, 30, 54, 78, 102],\n      [6, 28, 54, 80, 106],\n      [6, 32, 58, 84, 110],\n      [6, 30, 58, 86, 114],\n      [6, 34, 62, 90, 118],\n      [6, 26, 50, 74, 98, 122],\n      [6, 30, 54, 78, 102, 126],\n      [6, 26, 52, 78, 104, 130],\n      [6, 30, 56, 82, 108, 134],\n      [6, 34, 60, 86, 112, 138],\n      [6, 30, 58, 86, 114, 142],\n      [6, 34, 62, 90, 118, 146],\n      [6, 30, 54, 78, 102, 126, 150],\n      [6, 24, 50, 76, 102, 128, 154],\n      [6, 28, 54, 80, 106, 132, 158],\n      [6, 32, 58, 84, 110, 136, 162],\n      [6, 26, 54, 82, 110, 138, 166],\n      [6, 30, 58, 86, 114, 142, 170],\n    ];\n    var G15 =\n      (1 << 10) |\n      (1 << 8) |\n      (1 << 5) |\n      (1 << 4) |\n      (1 << 2) |\n      (1 << 1) |\n      (1 << 0);\n    var G18 =\n      (1 << 12) |\n      (1 << 11) |\n      (1 << 10) |\n      (1 << 9) |\n      (1 << 8) |\n      (1 << 5) |\n      (1 << 2) |\n      (1 << 0);\n    var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n\n    var _this = {};\n\n    var getBCHDigit = function (data) {\n      var digit = 0;\n      while (data != 0) {\n        digit += 1;\n        data >>>= 1;\n      }\n      return digit;\n    };\n\n    _this.getBCHTypeInfo = function (data) {\n      var d = data << 10;\n      while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n        d ^= G15 << (getBCHDigit(d) - getBCHDigit(G15));\n      }\n      return ((data << 10) | d) ^ G15_MASK;\n    };\n\n    _this.getBCHTypeNumber = function (data) {\n      var d = data << 12;\n      while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n        d ^= G18 << (getBCHDigit(d) - getBCHDigit(G18));\n      }\n      return (data << 12) | d;\n    };\n\n    _this.getPatternPosition = function (typeNumber) {\n      return PATTERN_POSITION_TABLE[typeNumber - 1];\n    };\n\n    _this.getMaskFunction = function (maskPattern) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return function (i, j) {\n            return (i + j) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN001:\n          return function (i, j) {\n            return i % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN010:\n          return function (i, j) {\n            return j % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN011:\n          return function (i, j) {\n            return (i + j) % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN100:\n          return function (i, j) {\n            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN101:\n          return function (i, j) {\n            return ((i * j) % 2) + ((i * j) % 3) == 0;\n          };\n        case QRMaskPattern.PATTERN110:\n          return function (i, j) {\n            return (((i * j) % 2) + ((i * j) % 3)) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN111:\n          return function (i, j) {\n            return (((i * j) % 3) + ((i + j) % 2)) % 2 == 0;\n          };\n\n        default:\n          throw \"bad maskPattern:\" + maskPattern;\n      }\n    };\n\n    _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\n      var a = qrPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i += 1) {\n        a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\n      }\n      return a;\n    };\n\n    _this.getLengthInBits = function (mode, type) {\n      if (1 <= type && type < 10) {\n        // 1 - 9\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 10;\n          case QRMode.MODE_ALPHA_NUM:\n            return 9;\n          case QRMode.MODE_8BIT_BYTE:\n            return 8;\n          case QRMode.MODE_KANJI:\n            return 8;\n          default:\n            throw \"mode:\" + mode;\n        }\n      } else if (type < 27) {\n        // 10 - 26\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 12;\n          case QRMode.MODE_ALPHA_NUM:\n            return 11;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 10;\n          default:\n            throw \"mode:\" + mode;\n        }\n      } else if (type < 41) {\n        // 27 - 40\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 14;\n          case QRMode.MODE_ALPHA_NUM:\n            return 13;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 12;\n          default:\n            throw \"mode:\" + mode;\n        }\n      } else {\n        throw \"type:\" + type;\n      }\n    };\n\n    _this.getLostPoint = function (qrcode) {\n      var moduleCount = qrcode.getModuleCount();\n\n      var lostPoint = 0;\n\n      // LEVEL1\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount; col += 1) {\n          var sameCount = 0;\n          var dark = qrcode.isDark(row, col);\n\n          for (var r = -1; r <= 1; r += 1) {\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n\n            for (var c = -1; c <= 1; c += 1) {\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n\n              if (r == 0 && c == 0) {\n                continue;\n              }\n\n              if (dark == qrcode.isDark(row + r, col + c)) {\n                sameCount += 1;\n              }\n            }\n          }\n\n          if (sameCount > 5) {\n            lostPoint += 3 + sameCount - 5;\n          }\n        }\n      }\n\n      // LEVEL2\n\n      for (var row = 0; row < moduleCount - 1; row += 1) {\n        for (var col = 0; col < moduleCount - 1; col += 1) {\n          var count = 0;\n          if (qrcode.isDark(row, col)) count += 1;\n          if (qrcode.isDark(row + 1, col)) count += 1;\n          if (qrcode.isDark(row, col + 1)) count += 1;\n          if (qrcode.isDark(row + 1, col + 1)) count += 1;\n          if (count == 0 || count == 4) {\n            lostPoint += 3;\n          }\n        }\n      }\n\n      // LEVEL3\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount - 6; col += 1) {\n          if (\n            qrcode.isDark(row, col) &&\n            !qrcode.isDark(row, col + 1) &&\n            qrcode.isDark(row, col + 2) &&\n            qrcode.isDark(row, col + 3) &&\n            qrcode.isDark(row, col + 4) &&\n            !qrcode.isDark(row, col + 5) &&\n            qrcode.isDark(row, col + 6)\n          ) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount - 6; row += 1) {\n          if (\n            qrcode.isDark(row, col) &&\n            !qrcode.isDark(row + 1, col) &&\n            qrcode.isDark(row + 2, col) &&\n            qrcode.isDark(row + 3, col) &&\n            qrcode.isDark(row + 4, col) &&\n            !qrcode.isDark(row + 5, col) &&\n            qrcode.isDark(row + 6, col)\n          ) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      // LEVEL4\n\n      var darkCount = 0;\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount; row += 1) {\n          if (qrcode.isDark(row, col)) {\n            darkCount += 1;\n          }\n        }\n      }\n\n      var ratio =\n        Math.abs((100 * darkCount) / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n\n      return lostPoint;\n    };\n\n    return _this;\n  })();\n\n  //---------------------------------------------------------------------\n  // QRMath\n  //---------------------------------------------------------------------\n\n  var QRMath = (function () {\n    var EXP_TABLE = new Array(256);\n    var LOG_TABLE = new Array(256);\n\n    // initialize tables\n    for (var i = 0; i < 8; i += 1) {\n      EXP_TABLE[i] = 1 << i;\n    }\n    for (var i = 8; i < 256; i += 1) {\n      EXP_TABLE[i] =\n        EXP_TABLE[i - 4] ^\n        EXP_TABLE[i - 5] ^\n        EXP_TABLE[i - 6] ^\n        EXP_TABLE[i - 8];\n    }\n    for (var i = 0; i < 255; i += 1) {\n      LOG_TABLE[EXP_TABLE[i]] = i;\n    }\n\n    var _this = {};\n\n    _this.glog = function (n) {\n      if (n < 1) {\n        throw \"glog(\" + n + \")\";\n      }\n\n      return LOG_TABLE[n];\n    };\n\n    _this.gexp = function (n) {\n      while (n < 0) {\n        n += 255;\n      }\n\n      while (n >= 256) {\n        n -= 255;\n      }\n\n      return EXP_TABLE[n];\n    };\n\n    return _this;\n  })();\n\n  //---------------------------------------------------------------------\n  // qrPolynomial\n  //---------------------------------------------------------------------\n\n  function qrPolynomial(num, shift) {\n    if (typeof num.length == \"undefined\") {\n      throw num.length + \"/\" + shift;\n    }\n\n    var _num = (function () {\n      var offset = 0;\n      while (offset < num.length && num[offset] == 0) {\n        offset += 1;\n      }\n      var _num = new Array(num.length - offset + shift);\n      for (var i = 0; i < num.length - offset; i += 1) {\n        _num[i] = num[i + offset];\n      }\n      return _num;\n    })();\n\n    var _this = {};\n\n    _this.getAt = function (index) {\n      return _num[index];\n    };\n\n    _this.getLength = function () {\n      return _num.length;\n    };\n\n    _this.multiply = function (e) {\n      var num = new Array(_this.getLength() + e.getLength() - 1);\n\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        for (var j = 0; j < e.getLength(); j += 1) {\n          num[i + j] ^= QRMath.gexp(\n            QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)),\n          );\n        }\n      }\n\n      return qrPolynomial(num, 0);\n    };\n\n    _this.mod = function (e) {\n      if (_this.getLength() - e.getLength() < 0) {\n        return _this;\n      }\n\n      var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n\n      var num = new Array(_this.getLength());\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        num[i] = _this.getAt(i);\n      }\n\n      for (var i = 0; i < e.getLength(); i += 1) {\n        num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n      }\n\n      // recursive call\n      return qrPolynomial(num, 0).mod(e);\n    };\n\n    return _this;\n  }\n\n  //---------------------------------------------------------------------\n  // QRRSBlock\n  //---------------------------------------------------------------------\n\n  var QRRSBlock = (function () {\n    var RS_BLOCK_TABLE = [\n      // L\n      // M\n      // Q\n      // H\n\n      // 1\n      [1, 26, 19],\n      [1, 26, 16],\n      [1, 26, 13],\n      [1, 26, 9],\n\n      // 2\n      [1, 44, 34],\n      [1, 44, 28],\n      [1, 44, 22],\n      [1, 44, 16],\n\n      // 3\n      [1, 70, 55],\n      [1, 70, 44],\n      [2, 35, 17],\n      [2, 35, 13],\n\n      // 4\n      [1, 100, 80],\n      [2, 50, 32],\n      [2, 50, 24],\n      [4, 25, 9],\n\n      // 5\n      [1, 134, 108],\n      [2, 67, 43],\n      [2, 33, 15, 2, 34, 16],\n      [2, 33, 11, 2, 34, 12],\n\n      // 6\n      [2, 86, 68],\n      [4, 43, 27],\n      [4, 43, 19],\n      [4, 43, 15],\n\n      // 7\n      [2, 98, 78],\n      [4, 49, 31],\n      [2, 32, 14, 4, 33, 15],\n      [4, 39, 13, 1, 40, 14],\n\n      // 8\n      [2, 121, 97],\n      [2, 60, 38, 2, 61, 39],\n      [4, 40, 18, 2, 41, 19],\n      [4, 40, 14, 2, 41, 15],\n\n      // 9\n      [2, 146, 116],\n      [3, 58, 36, 2, 59, 37],\n      [4, 36, 16, 4, 37, 17],\n      [4, 36, 12, 4, 37, 13],\n\n      // 10\n      [2, 86, 68, 2, 87, 69],\n      [4, 69, 43, 1, 70, 44],\n      [6, 43, 19, 2, 44, 20],\n      [6, 43, 15, 2, 44, 16],\n\n      // 11\n      [4, 101, 81],\n      [1, 80, 50, 4, 81, 51],\n      [4, 50, 22, 4, 51, 23],\n      [3, 36, 12, 8, 37, 13],\n\n      // 12\n      [2, 116, 92, 2, 117, 93],\n      [6, 58, 36, 2, 59, 37],\n      [4, 46, 20, 6, 47, 21],\n      [7, 42, 14, 4, 43, 15],\n\n      // 13\n      [4, 133, 107],\n      [8, 59, 37, 1, 60, 38],\n      [8, 44, 20, 4, 45, 21],\n      [12, 33, 11, 4, 34, 12],\n\n      // 14\n      [3, 145, 115, 1, 146, 116],\n      [4, 64, 40, 5, 65, 41],\n      [11, 36, 16, 5, 37, 17],\n      [11, 36, 12, 5, 37, 13],\n\n      // 15\n      [5, 109, 87, 1, 110, 88],\n      [5, 65, 41, 5, 66, 42],\n      [5, 54, 24, 7, 55, 25],\n      [11, 36, 12, 7, 37, 13],\n\n      // 16\n      [5, 122, 98, 1, 123, 99],\n      [7, 73, 45, 3, 74, 46],\n      [15, 43, 19, 2, 44, 20],\n      [3, 45, 15, 13, 46, 16],\n\n      // 17\n      [1, 135, 107, 5, 136, 108],\n      [10, 74, 46, 1, 75, 47],\n      [1, 50, 22, 15, 51, 23],\n      [2, 42, 14, 17, 43, 15],\n\n      // 18\n      [5, 150, 120, 1, 151, 121],\n      [9, 69, 43, 4, 70, 44],\n      [17, 50, 22, 1, 51, 23],\n      [2, 42, 14, 19, 43, 15],\n\n      // 19\n      [3, 141, 113, 4, 142, 114],\n      [3, 70, 44, 11, 71, 45],\n      [17, 47, 21, 4, 48, 22],\n      [9, 39, 13, 16, 40, 14],\n\n      // 20\n      [3, 135, 107, 5, 136, 108],\n      [3, 67, 41, 13, 68, 42],\n      [15, 54, 24, 5, 55, 25],\n      [15, 43, 15, 10, 44, 16],\n\n      // 21\n      [4, 144, 116, 4, 145, 117],\n      [17, 68, 42],\n      [17, 50, 22, 6, 51, 23],\n      [19, 46, 16, 6, 47, 17],\n\n      // 22\n      [2, 139, 111, 7, 140, 112],\n      [17, 74, 46],\n      [7, 54, 24, 16, 55, 25],\n      [34, 37, 13],\n\n      // 23\n      [4, 151, 121, 5, 152, 122],\n      [4, 75, 47, 14, 76, 48],\n      [11, 54, 24, 14, 55, 25],\n      [16, 45, 15, 14, 46, 16],\n\n      // 24\n      [6, 147, 117, 4, 148, 118],\n      [6, 73, 45, 14, 74, 46],\n      [11, 54, 24, 16, 55, 25],\n      [30, 46, 16, 2, 47, 17],\n\n      // 25\n      [8, 132, 106, 4, 133, 107],\n      [8, 75, 47, 13, 76, 48],\n      [7, 54, 24, 22, 55, 25],\n      [22, 45, 15, 13, 46, 16],\n\n      // 26\n      [10, 142, 114, 2, 143, 115],\n      [19, 74, 46, 4, 75, 47],\n      [28, 50, 22, 6, 51, 23],\n      [33, 46, 16, 4, 47, 17],\n\n      // 27\n      [8, 152, 122, 4, 153, 123],\n      [22, 73, 45, 3, 74, 46],\n      [8, 53, 23, 26, 54, 24],\n      [12, 45, 15, 28, 46, 16],\n\n      // 28\n      [3, 147, 117, 10, 148, 118],\n      [3, 73, 45, 23, 74, 46],\n      [4, 54, 24, 31, 55, 25],\n      [11, 45, 15, 31, 46, 16],\n\n      // 29\n      [7, 146, 116, 7, 147, 117],\n      [21, 73, 45, 7, 74, 46],\n      [1, 53, 23, 37, 54, 24],\n      [19, 45, 15, 26, 46, 16],\n\n      // 30\n      [5, 145, 115, 10, 146, 116],\n      [19, 75, 47, 10, 76, 48],\n      [15, 54, 24, 25, 55, 25],\n      [23, 45, 15, 25, 46, 16],\n\n      // 31\n      [13, 145, 115, 3, 146, 116],\n      [2, 74, 46, 29, 75, 47],\n      [42, 54, 24, 1, 55, 25],\n      [23, 45, 15, 28, 46, 16],\n\n      // 32\n      [17, 145, 115],\n      [10, 74, 46, 23, 75, 47],\n      [10, 54, 24, 35, 55, 25],\n      [19, 45, 15, 35, 46, 16],\n\n      // 33\n      [17, 145, 115, 1, 146, 116],\n      [14, 74, 46, 21, 75, 47],\n      [29, 54, 24, 19, 55, 25],\n      [11, 45, 15, 46, 46, 16],\n\n      // 34\n      [13, 145, 115, 6, 146, 116],\n      [14, 74, 46, 23, 75, 47],\n      [44, 54, 24, 7, 55, 25],\n      [59, 46, 16, 1, 47, 17],\n\n      // 35\n      [12, 151, 121, 7, 152, 122],\n      [12, 75, 47, 26, 76, 48],\n      [39, 54, 24, 14, 55, 25],\n      [22, 45, 15, 41, 46, 16],\n\n      // 36\n      [6, 151, 121, 14, 152, 122],\n      [6, 75, 47, 34, 76, 48],\n      [46, 54, 24, 10, 55, 25],\n      [2, 45, 15, 64, 46, 16],\n\n      // 37\n      [17, 152, 122, 4, 153, 123],\n      [29, 74, 46, 14, 75, 47],\n      [49, 54, 24, 10, 55, 25],\n      [24, 45, 15, 46, 46, 16],\n\n      // 38\n      [4, 152, 122, 18, 153, 123],\n      [13, 74, 46, 32, 75, 47],\n      [48, 54, 24, 14, 55, 25],\n      [42, 45, 15, 32, 46, 16],\n\n      // 39\n      [20, 147, 117, 4, 148, 118],\n      [40, 75, 47, 7, 76, 48],\n      [43, 54, 24, 22, 55, 25],\n      [10, 45, 15, 67, 46, 16],\n\n      // 40\n      [19, 148, 118, 6, 149, 119],\n      [18, 75, 47, 31, 76, 48],\n      [34, 54, 24, 34, 55, 25],\n      [20, 45, 15, 61, 46, 16],\n    ];\n\n    var qrRSBlock = function (totalCount, dataCount) {\n      var _this = {};\n      _this.totalCount = totalCount;\n      _this.dataCount = dataCount;\n      return _this;\n    };\n\n    var _this = {};\n\n    var getRsBlockTable = function (typeNumber, errorCorrectionLevel) {\n      switch (errorCorrectionLevel) {\n        case QRErrorCorrectionLevel.L:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n        case QRErrorCorrectionLevel.M:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n        case QRErrorCorrectionLevel.Q:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n        case QRErrorCorrectionLevel.H:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n        default:\n          return undefined;\n      }\n    };\n\n    _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {\n      var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n\n      if (typeof rsBlock == \"undefined\") {\n        throw (\n          \"bad rs block @ typeNumber:\" +\n          typeNumber +\n          \"/errorCorrectionLevel:\" +\n          errorCorrectionLevel\n        );\n      }\n\n      var length = rsBlock.length / 3;\n\n      var list = [];\n\n      for (var i = 0; i < length; i += 1) {\n        var count = rsBlock[i * 3 + 0];\n        var totalCount = rsBlock[i * 3 + 1];\n        var dataCount = rsBlock[i * 3 + 2];\n\n        for (var j = 0; j < count; j += 1) {\n          list.push(qrRSBlock(totalCount, dataCount));\n        }\n      }\n\n      return list;\n    };\n\n    return _this;\n  })();\n\n  //---------------------------------------------------------------------\n  // qrBitBuffer\n  //---------------------------------------------------------------------\n\n  var qrBitBuffer = function () {\n    var _buffer = [];\n    var _length = 0;\n\n    var _this = {};\n\n    _this.getBuffer = function () {\n      return _buffer;\n    };\n\n    _this.getAt = function (index) {\n      var bufIndex = Math.floor(index / 8);\n      return ((_buffer[bufIndex] >>> (7 - (index % 8))) & 1) == 1;\n    };\n\n    _this.put = function (num, length) {\n      for (var i = 0; i < length; i += 1) {\n        _this.putBit(((num >>> (length - i - 1)) & 1) == 1);\n      }\n    };\n\n    _this.getLengthInBits = function () {\n      return _length;\n    };\n\n    _this.putBit = function (bit) {\n      var bufIndex = Math.floor(_length / 8);\n      if (_buffer.length <= bufIndex) {\n        _buffer.push(0);\n      }\n\n      if (bit) {\n        _buffer[bufIndex] |= 0x80 >>> _length % 8;\n      }\n\n      _length += 1;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrNumber\n  //---------------------------------------------------------------------\n\n  var qrNumber = function (data) {\n    var _mode = QRMode.MODE_NUMBER;\n    var _data = data;\n\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return _data.length;\n    };\n\n    _this.write = function (buffer) {\n      var data = _data;\n\n      var i = 0;\n\n      while (i + 2 < data.length) {\n        buffer.put(strToNum(data.substring(i, i + 3)), 10);\n        i += 3;\n      }\n\n      if (i < data.length) {\n        if (data.length - i == 1) {\n          buffer.put(strToNum(data.substring(i, i + 1)), 4);\n        } else if (data.length - i == 2) {\n          buffer.put(strToNum(data.substring(i, i + 2)), 7);\n        }\n      }\n    };\n\n    var strToNum = function (s) {\n      var num = 0;\n      for (var i = 0; i < s.length; i += 1) {\n        num = num * 10 + chatToNum(s.charAt(i));\n      }\n      return num;\n    };\n\n    var chatToNum = function (c) {\n      if (\"0\" <= c && c <= \"9\") {\n        return c.charCodeAt(0) - \"0\".charCodeAt(0);\n      }\n      throw \"illegal char :\" + c;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrAlphaNum\n  //---------------------------------------------------------------------\n\n  var qrAlphaNum = function (data) {\n    var _mode = QRMode.MODE_ALPHA_NUM;\n    var _data = data;\n\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return _data.length;\n    };\n\n    _this.write = function (buffer) {\n      var s = _data;\n\n      var i = 0;\n\n      while (i + 1 < s.length) {\n        buffer.put(getCode(s.charAt(i)) * 45 + getCode(s.charAt(i + 1)), 11);\n        i += 2;\n      }\n\n      if (i < s.length) {\n        buffer.put(getCode(s.charAt(i)), 6);\n      }\n    };\n\n    var getCode = function (c) {\n      if (\"0\" <= c && c <= \"9\") {\n        return c.charCodeAt(0) - \"0\".charCodeAt(0);\n      } else if (\"A\" <= c && c <= \"Z\") {\n        return c.charCodeAt(0) - \"A\".charCodeAt(0) + 10;\n      } else {\n        switch (c) {\n          case \" \":\n            return 36;\n          case \"$\":\n            return 37;\n          case \"%\":\n            return 38;\n          case \"*\":\n            return 39;\n          case \"+\":\n            return 40;\n          case \"-\":\n            return 41;\n          case \".\":\n            return 42;\n          case \"/\":\n            return 43;\n          case \":\":\n            return 44;\n          default:\n            throw \"illegal char :\" + c;\n        }\n      }\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qr8BitByte\n  //---------------------------------------------------------------------\n\n  var qr8BitByte = function (data) {\n    var _mode = QRMode.MODE_8BIT_BYTE;\n    var _data = data;\n    var _bytes = qrcode.stringToBytes(data);\n\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return _bytes.length;\n    };\n\n    _this.write = function (buffer) {\n      for (var i = 0; i < _bytes.length; i += 1) {\n        buffer.put(_bytes[i], 8);\n      }\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrKanji\n  //---------------------------------------------------------------------\n\n  var qrKanji = function (data) {\n    var _mode = QRMode.MODE_KANJI;\n    var _data = data;\n\n    var stringToBytes = qrcode.stringToBytesFuncs[\"SJIS\"];\n    if (!stringToBytes) {\n      throw \"sjis not supported.\";\n    }\n    !(function (c, code) {\n      // self test for sjis support.\n      var test = stringToBytes(c);\n      if (test.length != 2 || ((test[0] << 8) | test[1]) != code) {\n        throw \"sjis not supported.\";\n      }\n    })(\"\\u53cb\", 0x9746);\n\n    var _bytes = stringToBytes(data);\n\n    var _this = {};\n\n    _this.getMode = function () {\n      return _mode;\n    };\n\n    _this.getLength = function (buffer) {\n      return ~~(_bytes.length / 2);\n    };\n\n    _this.write = function (buffer) {\n      var data = _bytes;\n\n      var i = 0;\n\n      while (i + 1 < data.length) {\n        var c = ((0xff & data[i]) << 8) | (0xff & data[i + 1]);\n\n        if (0x8140 <= c && c <= 0x9ffc) {\n          c -= 0x8140;\n        } else if (0xe040 <= c && c <= 0xebbf) {\n          c -= 0xc140;\n        } else {\n          throw \"illegal char at \" + (i + 1) + \"/\" + c;\n        }\n\n        c = ((c >>> 8) & 0xff) * 0xc0 + (c & 0xff);\n\n        buffer.put(c, 13);\n\n        i += 2;\n      }\n\n      if (i < data.length) {\n        throw \"illegal char at \" + (i + 1);\n      }\n    };\n\n    return _this;\n  };\n\n  //=====================================================================\n  // GIF Support etc.\n  //\n\n  //---------------------------------------------------------------------\n  // byteArrayOutputStream\n  //---------------------------------------------------------------------\n\n  var byteArrayOutputStream = function () {\n    var _bytes = [];\n\n    var _this = {};\n\n    _this.writeByte = function (b) {\n      _bytes.push(b & 0xff);\n    };\n\n    _this.writeShort = function (i) {\n      _this.writeByte(i);\n      _this.writeByte(i >>> 8);\n    };\n\n    _this.writeBytes = function (b, off, len) {\n      off = off || 0;\n      len = len || b.length;\n      for (var i = 0; i < len; i += 1) {\n        _this.writeByte(b[i + off]);\n      }\n    };\n\n    _this.writeString = function (s) {\n      for (var i = 0; i < s.length; i += 1) {\n        _this.writeByte(s.charCodeAt(i));\n      }\n    };\n\n    _this.toByteArray = function () {\n      return _bytes;\n    };\n\n    _this.toString = function () {\n      var s = \"\";\n      s += \"[\";\n      for (var i = 0; i < _bytes.length; i += 1) {\n        if (i > 0) {\n          s += \",\";\n        }\n        s += _bytes[i];\n      }\n      s += \"]\";\n      return s;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // base64EncodeOutputStream\n  //---------------------------------------------------------------------\n\n  var base64EncodeOutputStream = function () {\n    var _buffer = 0;\n    var _buflen = 0;\n    var _length = 0;\n    var _base64 = \"\";\n\n    var _this = {};\n\n    var writeEncoded = function (b) {\n      _base64 += String.fromCharCode(encode(b & 0x3f));\n    };\n\n    var encode = function (n) {\n      if (n < 0) {\n        // error.\n      } else if (n < 26) {\n        return 0x41 + n;\n      } else if (n < 52) {\n        return 0x61 + (n - 26);\n      } else if (n < 62) {\n        return 0x30 + (n - 52);\n      } else if (n == 62) {\n        return 0x2b;\n      } else if (n == 63) {\n        return 0x2f;\n      }\n      throw \"n:\" + n;\n    };\n\n    _this.writeByte = function (n) {\n      _buffer = (_buffer << 8) | (n & 0xff);\n      _buflen += 8;\n      _length += 1;\n\n      while (_buflen >= 6) {\n        writeEncoded(_buffer >>> (_buflen - 6));\n        _buflen -= 6;\n      }\n    };\n\n    _this.flush = function () {\n      if (_buflen > 0) {\n        writeEncoded(_buffer << (6 - _buflen));\n        _buffer = 0;\n        _buflen = 0;\n      }\n\n      if (_length % 3 != 0) {\n        // padding\n        var padlen = 3 - (_length % 3);\n        for (var i = 0; i < padlen; i += 1) {\n          _base64 += \"=\";\n        }\n      }\n    };\n\n    _this.toString = function () {\n      return _base64;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // base64DecodeInputStream\n  //---------------------------------------------------------------------\n\n  var base64DecodeInputStream = function (str) {\n    var _str = str;\n    var _pos = 0;\n    var _buffer = 0;\n    var _buflen = 0;\n\n    var _this = {};\n\n    _this.read = function () {\n      while (_buflen < 8) {\n        if (_pos >= _str.length) {\n          if (_buflen == 0) {\n            return -1;\n          }\n          throw \"unexpected end of file./\" + _buflen;\n        }\n\n        var c = _str.charAt(_pos);\n        _pos += 1;\n\n        if (c == \"=\") {\n          _buflen = 0;\n          return -1;\n        } else if (c.match(/^\\s$/)) {\n          // ignore if whitespace.\n          continue;\n        }\n\n        _buffer = (_buffer << 6) | decode(c.charCodeAt(0));\n        _buflen += 6;\n      }\n\n      var n = (_buffer >>> (_buflen - 8)) & 0xff;\n      _buflen -= 8;\n      return n;\n    };\n\n    var decode = function (c) {\n      if (0x41 <= c && c <= 0x5a) {\n        return c - 0x41;\n      } else if (0x61 <= c && c <= 0x7a) {\n        return c - 0x61 + 26;\n      } else if (0x30 <= c && c <= 0x39) {\n        return c - 0x30 + 52;\n      } else if (c == 0x2b) {\n        return 62;\n      } else if (c == 0x2f) {\n        return 63;\n      } else {\n        throw \"c:\" + c;\n      }\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // gifImage (B/W)\n  //---------------------------------------------------------------------\n\n  var gifImage = function (width, height) {\n    var _width = width;\n    var _height = height;\n    var _data = new Array(width * height);\n\n    var _this = {};\n\n    _this.setPixel = function (x, y, pixel) {\n      _data[y * _width + x] = pixel;\n    };\n\n    _this.write = function (out) {\n      //---------------------------------\n      // GIF Signature\n\n      out.writeString(\"GIF87a\");\n\n      //---------------------------------\n      // Screen Descriptor\n\n      out.writeShort(_width);\n      out.writeShort(_height);\n\n      out.writeByte(0x80); // 2bit\n      out.writeByte(0);\n      out.writeByte(0);\n\n      //---------------------------------\n      // Global Color Map\n\n      // black\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n\n      // white\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n\n      //---------------------------------\n      // Image Descriptor\n\n      out.writeString(\",\");\n      out.writeShort(0);\n      out.writeShort(0);\n      out.writeShort(_width);\n      out.writeShort(_height);\n      out.writeByte(0);\n\n      //---------------------------------\n      // Local Color Map\n\n      //---------------------------------\n      // Raster Data\n\n      var lzwMinCodeSize = 2;\n      var raster = getLZWRaster(lzwMinCodeSize);\n\n      out.writeByte(lzwMinCodeSize);\n\n      var offset = 0;\n\n      while (raster.length - offset > 255) {\n        out.writeByte(255);\n        out.writeBytes(raster, offset, 255);\n        offset += 255;\n      }\n\n      out.writeByte(raster.length - offset);\n      out.writeBytes(raster, offset, raster.length - offset);\n      out.writeByte(0x00);\n\n      //---------------------------------\n      // GIF Terminator\n      out.writeString(\";\");\n    };\n\n    var bitOutputStream = function (out) {\n      var _out = out;\n      var _bitLength = 0;\n      var _bitBuffer = 0;\n\n      var _this = {};\n\n      _this.write = function (data, length) {\n        if (data >>> length != 0) {\n          throw \"length over\";\n        }\n\n        while (_bitLength + length >= 8) {\n          _out.writeByte(0xff & ((data << _bitLength) | _bitBuffer));\n          length -= 8 - _bitLength;\n          data >>>= 8 - _bitLength;\n          _bitBuffer = 0;\n          _bitLength = 0;\n        }\n\n        _bitBuffer = (data << _bitLength) | _bitBuffer;\n        _bitLength = _bitLength + length;\n      };\n\n      _this.flush = function () {\n        if (_bitLength > 0) {\n          _out.writeByte(_bitBuffer);\n        }\n      };\n\n      return _this;\n    };\n\n    var getLZWRaster = function (lzwMinCodeSize) {\n      var clearCode = 1 << lzwMinCodeSize;\n      var endCode = (1 << lzwMinCodeSize) + 1;\n      var bitLength = lzwMinCodeSize + 1;\n\n      // Setup LZWTable\n      var table = lzwTable();\n\n      for (var i = 0; i < clearCode; i += 1) {\n        table.add(String.fromCharCode(i));\n      }\n      table.add(String.fromCharCode(clearCode));\n      table.add(String.fromCharCode(endCode));\n\n      var byteOut = byteArrayOutputStream();\n      var bitOut = bitOutputStream(byteOut);\n\n      // clear code\n      bitOut.write(clearCode, bitLength);\n\n      var dataIndex = 0;\n\n      var s = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n\n      while (dataIndex < _data.length) {\n        var c = String.fromCharCode(_data[dataIndex]);\n        dataIndex += 1;\n\n        if (table.contains(s + c)) {\n          s = s + c;\n        } else {\n          bitOut.write(table.indexOf(s), bitLength);\n\n          if (table.size() < 0xfff) {\n            if (table.size() == 1 << bitLength) {\n              bitLength += 1;\n            }\n\n            table.add(s + c);\n          }\n\n          s = c;\n        }\n      }\n\n      bitOut.write(table.indexOf(s), bitLength);\n\n      // end code\n      bitOut.write(endCode, bitLength);\n\n      bitOut.flush();\n\n      return byteOut.toByteArray();\n    };\n\n    var lzwTable = function () {\n      var _map = {};\n      var _size = 0;\n\n      var _this = {};\n\n      _this.add = function (key) {\n        if (_this.contains(key)) {\n          throw \"dup key:\" + key;\n        }\n        _map[key] = _size;\n        _size += 1;\n      };\n\n      _this.size = function () {\n        return _size;\n      };\n\n      _this.indexOf = function (key) {\n        return _map[key];\n      };\n\n      _this.contains = function (key) {\n        return typeof _map[key] != \"undefined\";\n      };\n\n      return _this;\n    };\n\n    return _this;\n  };\n\n  var createDataURL = function (width, height, getPixel) {\n    var gif = gifImage(width, height);\n    for (var y = 0; y < height; y += 1) {\n      for (var x = 0; x < width; x += 1) {\n        gif.setPixel(x, y, getPixel(x, y));\n      }\n    }\n\n    var b = byteArrayOutputStream();\n    gif.write(b);\n\n    var base64 = base64EncodeOutputStream();\n    var bytes = b.toByteArray();\n    for (var i = 0; i < bytes.length; i += 1) {\n      base64.writeByte(bytes[i]);\n    }\n    base64.flush();\n\n    return \"data:image/gif;base64,\" + base64;\n  };\n\n  //---------------------------------------------------------------------\n  // returns qrcode function.\n\n  return qrcode;\n})();\n\n// multibyte support\n!(function () {\n  qrcode.stringToBytesFuncs[\"UTF-8\"] = function (s) {\n    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n    function toUTF8Array(str) {\n      var utf8 = [];\n      for (var i = 0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n          utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));\n        } else if (charcode < 0xd800 || charcode >= 0xe000) {\n          utf8.push(\n            0xe0 | (charcode >> 12),\n            0x80 | ((charcode >> 6) & 0x3f),\n            0x80 | (charcode & 0x3f),\n          );\n        }\n        // surrogate pair\n        else {\n          i++;\n          // UTF-16 encodes 0x10000-0x10FFFF by\n          // subtracting 0x10000 and splitting the\n          // 20 bits of 0x0-0xFFFFF into two halves\n          charcode =\n            0x10000 +\n            (((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n          utf8.push(\n            0xf0 | (charcode >> 18),\n            0x80 | ((charcode >> 12) & 0x3f),\n            0x80 | ((charcode >> 6) & 0x3f),\n            0x80 | (charcode & 0x3f),\n          );\n        }\n      }\n      return utf8;\n    }\n    return toUTF8Array(s);\n  };\n})();\n\nexport default qrcode;\n"],
  "mappings": ";AAiBA,IAAI,UAAU,WAAY;AAUxB,MAAIA,UAAS,SAAU,YAAY,sBAAsB;AACvD,QAAI,OAAO;AACX,QAAI,OAAO;AAEX,QAAI,cAAc;AAClB,QAAI,wBAAwB,uBAAuB,oBAAoB;AACvE,QAAI,WAAW;AACf,QAAI,eAAe;AACnB,QAAI,aAAa;AACjB,QAAI,YAAY,CAAC;AAEjB,QAAI,QAAQ,CAAC;AAEb,QAAI,WAAW,SAAU,MAAM,aAAa;AAC1C,qBAAe,cAAc,IAAI;AACjC,kBAAY,SAAU,aAAa;AACjC,YAAI,UAAU,IAAI,MAAM,WAAW;AACnC,iBAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,kBAAQ,GAAG,IAAI,IAAI,MAAM,WAAW;AACpC,mBAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,oBAAQ,GAAG,EAAE,GAAG,IAAI;AAAA,UACtB;AAAA,QACF;AACA,eAAO;AAAA,MACT,GAAG,YAAY;AAEf,gCAA0B,GAAG,CAAC;AAC9B,gCAA0B,eAAe,GAAG,CAAC;AAC7C,gCAA0B,GAAG,eAAe,CAAC;AAC7C,iCAA2B;AAC3B,yBAAmB;AACnB,oBAAc,MAAM,WAAW;AAE/B,UAAI,eAAe,GAAG;AACpB,wBAAgB,IAAI;AAAA,MACtB;AAEA,UAAI,cAAc,MAAM;AACtB,qBAAa,WAAW,aAAa,uBAAuB,SAAS;AAAA,MACvE;AAEA,cAAQ,YAAY,WAAW;AAAA,IACjC;AAEA,QAAI,4BAA4B,SAAU,KAAK,KAAK;AAClD,eAAS,IAAI,IAAI,KAAK,GAAG,KAAK,GAAG;AAC/B,YAAI,MAAM,KAAK,MAAM,gBAAgB,MAAM,EAAG;AAE9C,iBAAS,IAAI,IAAI,KAAK,GAAG,KAAK,GAAG;AAC/B,cAAI,MAAM,KAAK,MAAM,gBAAgB,MAAM,EAAG;AAE9C,cACG,KAAK,KAAK,KAAK,MAAM,KAAK,KAAK,KAAK,MACpC,KAAK,KAAK,KAAK,MAAM,KAAK,KAAK,KAAK,MACpC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GACpC;AACA,qBAAS,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI;AAAA,UAC/B,OAAO;AACL,qBAAS,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI;AAAA,UAC/B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,QAAI,qBAAqB,WAAY;AACnC,UAAI,eAAe;AACnB,UAAI,UAAU;AAEd,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC7B,iBAAS,MAAM,CAAC;AAEhB,YAAI,YAAY,OAAO,aAAa,KAAK;AAEzC,YAAI,KAAK,KAAK,eAAe,WAAW;AACtC,yBAAe;AACf,oBAAU;AAAA,QACZ;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,QAAI,qBAAqB,WAAY;AACnC,eAAS,IAAI,GAAG,IAAI,eAAe,GAAG,KAAK,GAAG;AAC5C,YAAI,SAAS,CAAC,EAAE,CAAC,KAAK,MAAM;AAC1B;AAAA,QACF;AACA,iBAAS,CAAC,EAAE,CAAC,IAAI,IAAI,KAAK;AAAA,MAC5B;AAEA,eAAS,IAAI,GAAG,IAAI,eAAe,GAAG,KAAK,GAAG;AAC5C,YAAI,SAAS,CAAC,EAAE,CAAC,KAAK,MAAM;AAC1B;AAAA,QACF;AACA,iBAAS,CAAC,EAAE,CAAC,IAAI,IAAI,KAAK;AAAA,MAC5B;AAAA,IACF;AAEA,QAAI,6BAA6B,WAAY;AAC3C,UAAI,MAAM,OAAO,mBAAmB,WAAW;AAE/C,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,cAAI,MAAM,IAAI,CAAC;AACf,cAAI,MAAM,IAAI,CAAC;AAEf,cAAI,SAAS,GAAG,EAAE,GAAG,KAAK,MAAM;AAC9B;AAAA,UACF;AAEA,mBAAS,IAAI,IAAI,KAAK,GAAG,KAAK,GAAG;AAC/B,qBAAS,IAAI,IAAI,KAAK,GAAG,KAAK,GAAG;AAC/B,kBACE,KAAK,MACL,KAAK,KACL,KAAK,MACL,KAAK,KACJ,KAAK,KAAK,KAAK,GAChB;AACA,yBAAS,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI;AAAA,cAC/B,OAAO;AACL,yBAAS,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI;AAAA,cAC/B;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,QAAI,kBAAkB,SAAU,MAAM;AACpC,UAAI,OAAO,OAAO,iBAAiB,WAAW;AAE9C,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG;AAC9B,YAAI,MAAM,CAAC,SAAU,QAAQ,IAAK,MAAM;AACxC,iBAAS,KAAK,MAAM,IAAI,CAAC,CAAC,EAAG,IAAI,IAAK,eAAe,IAAI,CAAC,IAAI;AAAA,MAChE;AAEA,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG;AAC9B,YAAI,MAAM,CAAC,SAAU,QAAQ,IAAK,MAAM;AACxC,iBAAU,IAAI,IAAK,eAAe,IAAI,CAAC,EAAE,KAAK,MAAM,IAAI,CAAC,CAAC,IAAI;AAAA,MAChE;AAAA,IACF;AAEA,QAAI,gBAAgB,SAAU,MAAM,aAAa;AAC/C,UAAI,OAAQ,yBAAyB,IAAK;AAC1C,UAAI,OAAO,OAAO,eAAe,IAAI;AAGrC,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG;AAC9B,YAAI,MAAM,CAAC,SAAU,QAAQ,IAAK,MAAM;AAExC,YAAI,IAAI,GAAG;AACT,mBAAS,CAAC,EAAE,CAAC,IAAI;AAAA,QACnB,WAAW,IAAI,GAAG;AAChB,mBAAS,IAAI,CAAC,EAAE,CAAC,IAAI;AAAA,QACvB,OAAO;AACL,mBAAS,eAAe,KAAK,CAAC,EAAE,CAAC,IAAI;AAAA,QACvC;AAAA,MACF;AAGA,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG;AAC9B,YAAI,MAAM,CAAC,SAAU,QAAQ,IAAK,MAAM;AAExC,YAAI,IAAI,GAAG;AACT,mBAAS,CAAC,EAAE,eAAe,IAAI,CAAC,IAAI;AAAA,QACtC,WAAW,IAAI,GAAG;AAChB,mBAAS,CAAC,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI;AAAA,QAChC,OAAO;AACL,mBAAS,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI;AAAA,QAC5B;AAAA,MACF;AAGA,eAAS,eAAe,CAAC,EAAE,CAAC,IAAI,CAAC;AAAA,IACnC;AAEA,QAAI,UAAU,SAAU,MAAM,aAAa;AACzC,UAAI,MAAM;AACV,UAAI,MAAM,eAAe;AACzB,UAAI,WAAW;AACf,UAAI,YAAY;AAChB,UAAI,WAAW,OAAO,gBAAgB,WAAW;AAEjD,eAAS,MAAM,eAAe,GAAG,MAAM,GAAG,OAAO,GAAG;AAClD,YAAI,OAAO,EAAG,QAAO;AAErB,eAAO,MAAM;AACX,mBAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC7B,gBAAI,SAAS,GAAG,EAAE,MAAM,CAAC,KAAK,MAAM;AAClC,kBAAI,OAAO;AAEX,kBAAI,YAAY,KAAK,QAAQ;AAC3B,wBAAS,KAAK,SAAS,MAAM,WAAY,MAAM;AAAA,cACjD;AAEA,kBAAI,OAAO,SAAS,KAAK,MAAM,CAAC;AAEhC,kBAAI,MAAM;AACR,uBAAO,CAAC;AAAA,cACV;AAEA,uBAAS,GAAG,EAAE,MAAM,CAAC,IAAI;AACzB,0BAAY;AAEZ,kBAAI,YAAY,IAAI;AAClB,6BAAa;AACb,2BAAW;AAAA,cACb;AAAA,YACF;AAAA,UACF;AAEA,iBAAO;AAEP,cAAI,MAAM,KAAK,gBAAgB,KAAK;AAClC,mBAAO;AACP,kBAAM,CAAC;AACP;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,QAAI,cAAc,SAAU,QAAQ,UAAU;AAC5C,UAAI,SAAS;AAEb,UAAI,aAAa;AACjB,UAAI,aAAa;AAEjB,UAAI,SAAS,IAAI,MAAM,SAAS,MAAM;AACtC,UAAI,SAAS,IAAI,MAAM,SAAS,MAAM;AAEtC,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,YAAI,UAAU,SAAS,CAAC,EAAE;AAC1B,YAAI,UAAU,SAAS,CAAC,EAAE,aAAa;AAEvC,qBAAa,KAAK,IAAI,YAAY,OAAO;AACzC,qBAAa,KAAK,IAAI,YAAY,OAAO;AAEzC,eAAO,CAAC,IAAI,IAAI,MAAM,OAAO;AAE7B,iBAAS,IAAI,GAAG,IAAI,OAAO,CAAC,EAAE,QAAQ,KAAK,GAAG;AAC5C,iBAAO,CAAC,EAAE,CAAC,IAAI,MAAO,OAAO,UAAU,EAAE,IAAI,MAAM;AAAA,QACrD;AACA,kBAAU;AAEV,YAAI,SAAS,OAAO,0BAA0B,OAAO;AACrD,YAAI,UAAU,aAAa,OAAO,CAAC,GAAG,OAAO,UAAU,IAAI,CAAC;AAE5D,YAAI,UAAU,QAAQ,IAAI,MAAM;AAChC,eAAO,CAAC,IAAI,IAAI,MAAM,OAAO,UAAU,IAAI,CAAC;AAC5C,iBAAS,IAAI,GAAG,IAAI,OAAO,CAAC,EAAE,QAAQ,KAAK,GAAG;AAC5C,cAAI,WAAW,IAAI,QAAQ,UAAU,IAAI,OAAO,CAAC,EAAE;AACnD,iBAAO,CAAC,EAAE,CAAC,IAAI,YAAY,IAAI,QAAQ,MAAM,QAAQ,IAAI;AAAA,QAC3D;AAAA,MACF;AAEA,UAAI,iBAAiB;AACrB,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,0BAAkB,SAAS,CAAC,EAAE;AAAA,MAChC;AAEA,UAAI,OAAO,IAAI,MAAM,cAAc;AACnC,UAAI,QAAQ;AAEZ,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,cAAI,IAAI,OAAO,CAAC,EAAE,QAAQ;AACxB,iBAAK,KAAK,IAAI,OAAO,CAAC,EAAE,CAAC;AACzB,qBAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAEA,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,cAAI,IAAI,OAAO,CAAC,EAAE,QAAQ;AACxB,iBAAK,KAAK,IAAI,OAAO,CAAC,EAAE,CAAC;AACzB,qBAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,QAAI,aAAa,SAAUC,aAAYC,uBAAsB,UAAU;AACrE,UAAI,WAAW,UAAU,YAAYD,aAAYC,qBAAoB;AAErE,UAAI,SAAS,YAAY;AAEzB,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,YAAI,OAAO,SAAS,CAAC;AACrB,eAAO,IAAI,KAAK,QAAQ,GAAG,CAAC;AAC5B,eAAO;AAAA,UACL,KAAK,UAAU;AAAA,UACf,OAAO,gBAAgB,KAAK,QAAQ,GAAGD,WAAU;AAAA,QACnD;AACA,aAAK,MAAM,MAAM;AAAA,MACnB;AAGA,UAAI,iBAAiB;AACrB,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,0BAAkB,SAAS,CAAC,EAAE;AAAA,MAChC;AAEA,UAAI,OAAO,gBAAgB,IAAI,iBAAiB,GAAG;AACjD,cACE,4BACA,OAAO,gBAAgB,IACvB,MACA,iBAAiB,IACjB;AAAA,MAEJ;AAGA,UAAI,OAAO,gBAAgB,IAAI,KAAK,iBAAiB,GAAG;AACtD,eAAO,IAAI,GAAG,CAAC;AAAA,MACjB;AAGA,aAAO,OAAO,gBAAgB,IAAI,KAAK,GAAG;AACxC,eAAO,OAAO,KAAK;AAAA,MACrB;AAGA,aAAO,MAAM;AACX,YAAI,OAAO,gBAAgB,KAAK,iBAAiB,GAAG;AAClD;AAAA,QACF;AACA,eAAO,IAAI,MAAM,CAAC;AAElB,YAAI,OAAO,gBAAgB,KAAK,iBAAiB,GAAG;AAClD;AAAA,QACF;AACA,eAAO,IAAI,MAAM,CAAC;AAAA,MACpB;AAEA,aAAO,YAAY,QAAQ,QAAQ;AAAA,IACrC;AAEA,UAAM,UAAU,SAAU,MAAM,MAAM;AACpC,aAAO,QAAQ;AAEf,UAAI,UAAU;AAEd,cAAQ,MAAM;AAAA,QACZ,KAAK;AACH,oBAAU,SAAS,IAAI;AACvB;AAAA,QACF,KAAK;AACH,oBAAU,WAAW,IAAI;AACzB;AAAA,QACF,KAAK;AACH,oBAAU,WAAW,IAAI;AACzB;AAAA,QACF,KAAK;AACH,oBAAU,QAAQ,IAAI;AACtB;AAAA,QACF;AACE,gBAAM,UAAU;AAAA,MACpB;AAEA,gBAAU,KAAK,OAAO;AACtB,mBAAa;AAAA,IACf;AAEA,UAAM,SAAS,SAAU,KAAK,KAAK;AACjC,UAAI,MAAM,KAAK,gBAAgB,OAAO,MAAM,KAAK,gBAAgB,KAAK;AACpE,cAAM,MAAM,MAAM;AAAA,MACpB;AACA,aAAO,SAAS,GAAG,EAAE,GAAG;AAAA,IAC1B;AAEA,UAAM,iBAAiB,WAAY;AACjC,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,WAAY;AACvB,UAAI,cAAc,GAAG;AACnB,YAAIA,cAAa;AAEjB,eAAOA,cAAa,IAAIA,eAAc;AACpC,cAAI,WAAW,UAAU;AAAA,YACvBA;AAAA,YACA;AAAA,UACF;AACA,cAAI,SAAS,YAAY;AAEzB,mBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,gBAAI,OAAO,UAAU,CAAC;AACtB,mBAAO,IAAI,KAAK,QAAQ,GAAG,CAAC;AAC5B,mBAAO;AAAA,cACL,KAAK,UAAU;AAAA,cACf,OAAO,gBAAgB,KAAK,QAAQ,GAAGA,WAAU;AAAA,YACnD;AACA,iBAAK,MAAM,MAAM;AAAA,UACnB;AAEA,cAAI,iBAAiB;AACrB,mBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,8BAAkB,SAAS,CAAC,EAAE;AAAA,UAChC;AAEA,cAAI,OAAO,gBAAgB,KAAK,iBAAiB,GAAG;AAClD;AAAA,UACF;AAAA,QACF;AAEA,sBAAcA;AAAA,MAChB;AAEA,eAAS,OAAO,mBAAmB,CAAC;AAAA,IACtC;AAEA,UAAM,iBAAiB,SAAU,UAAU,QAAQ;AACjD,iBAAW,YAAY;AACvB,eAAS,OAAO,UAAU,cAAc,WAAW,IAAI;AAEvD,UAAI,SAAS;AAEb,gBAAU;AACV,gBAAU;AACV,gBAAU;AACV,gBAAU,4BAA4B,SAAS;AAC/C,gBAAU;AACV,gBAAU;AAEV,eAAS,IAAI,GAAG,IAAI,MAAM,eAAe,GAAG,KAAK,GAAG;AAClD,kBAAU;AAEV,iBAAS,IAAI,GAAG,IAAI,MAAM,eAAe,GAAG,KAAK,GAAG;AAClD,oBAAU;AACV,oBAAU;AACV,oBAAU;AACV,oBAAU;AACV,oBAAU,aAAa,WAAW;AAClC,oBAAU,cAAc,WAAW;AACnC,oBAAU;AACV,oBAAU,MAAM,OAAO,GAAG,CAAC,IAAI,YAAY;AAC3C,oBAAU;AACV,oBAAU;AAAA,QACZ;AAEA,kBAAU;AAAA,MACZ;AAEA,gBAAU;AACV,gBAAU;AAEV,aAAO;AAAA,IACT;AAEA,UAAM,eAAe,SAAU,UAAU,QAAQ,KAAK,OAAO;AAC3D,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,UAAU,CAAC,KAAK,UAAU;AAEnC,eAAO,UAAU,CAAC;AAElB,mBAAW,KAAK;AAChB,iBAAS,KAAK;AACd,cAAM,KAAK;AACX,gBAAQ,KAAK;AAAA,MACf;AAEA,iBAAW,YAAY;AACvB,eAAS,OAAO,UAAU,cAAc,WAAW,IAAI;AAGvD,YAAM,OAAO,QAAQ,WAAW,EAAE,MAAM,IAAI,IAAI,OAAO,CAAC;AACxD,UAAI,OAAO,IAAI,QAAQ;AACvB,UAAI,KAAK,IAAI,OAAO,IAAI,MAAM,uBAAuB;AAGrD,cAAQ,OAAO,UAAU,WAAW,EAAE,MAAM,MAAM,IAAI,SAAS,CAAC;AAChE,YAAM,OAAO,MAAM,QAAQ;AAC3B,YAAM,KAAK,MAAM,OAAO,MAAM,MAAM,iBAAiB;AAErD,UAAI,OAAO,MAAM,eAAe,IAAI,WAAW,SAAS;AACxD,UAAI,GACF,IACA,GACA,IACA,QAAQ,IACR;AAEF,aACE,MACA,WACA,UACA,WACA,OACA,WACA,WACA,WACA;AAEF,eAAS;AACT,eAAS,CAAC,KAAK,WACX,aAAa,OAAO,iBAAiB,OAAO,QAC5C;AACJ,eAAS,mBAAmB,OAAO,MAAM,OAAO;AAChD,eAAS;AACT,eACE,MAAM,QAAQ,IAAI,OACd,kCACA,UAAU,CAAC,MAAM,IAAI,IAAI,EAAE,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,IAC7C,MACA;AACN,eAAS;AACT,eAAS,MAAM,OACX,gBACA,UAAU,MAAM,EAAE,IAClB,OACA,UAAU,MAAM,IAAI,IACpB,aACA;AACJ,eAAS,IAAI,OACT,sBACA,UAAU,IAAI,EAAE,IAChB,OACA,UAAU,IAAI,IAAI,IAClB,mBACA;AACJ,eAAS;AACT,eAAS;AAET,WAAK,IAAI,GAAG,IAAI,MAAM,eAAe,GAAG,KAAK,GAAG;AAC9C,aAAK,IAAI,WAAW;AACpB,aAAK,IAAI,GAAG,IAAI,MAAM,eAAe,GAAG,KAAK,GAAG;AAC9C,cAAI,MAAM,OAAO,GAAG,CAAC,GAAG;AACtB,iBAAK,IAAI,WAAW;AACpB,qBAAS,MAAM,KAAK,MAAM,KAAK;AAAA,UACjC;AAAA,QACF;AAAA,MACF;AAEA,eAAS;AACT,eAAS;AAET,aAAO;AAAA,IACT;AAEA,UAAM,gBAAgB,SAAU,UAAU,QAAQ;AAChD,iBAAW,YAAY;AACvB,eAAS,OAAO,UAAU,cAAc,WAAW,IAAI;AAEvD,UAAI,OAAO,MAAM,eAAe,IAAI,WAAW,SAAS;AACxD,UAAI,MAAM;AACV,UAAI,MAAM,OAAO;AAEjB,aAAO,cAAc,MAAM,MAAM,SAAU,GAAG,GAAG;AAC/C,YAAI,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK;AAC9C,cAAI,IAAI,KAAK,OAAO,IAAI,OAAO,QAAQ;AACvC,cAAI,IAAI,KAAK,OAAO,IAAI,OAAO,QAAQ;AACvC,iBAAO,MAAM,OAAO,GAAG,CAAC,IAAI,IAAI;AAAA,QAClC,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,eAAe,SAAU,UAAU,QAAQ,KAAK;AACpD,iBAAW,YAAY;AACvB,eAAS,OAAO,UAAU,cAAc,WAAW,IAAI;AAEvD,UAAI,OAAO,MAAM,eAAe,IAAI,WAAW,SAAS;AAExD,UAAI,MAAM;AACV,aAAO;AACP,aAAO;AACP,aAAO,MAAM,cAAc,UAAU,MAAM;AAC3C,aAAO;AACP,aAAO;AACP,aAAO;AACP,aAAO;AACP,aAAO;AACP,aAAO;AACP,aAAO;AACP,UAAI,KAAK;AACP,eAAO;AACP,eAAO,UAAU,GAAG;AACpB,eAAO;AAAA,MACT;AACA,aAAO;AAEP,aAAO;AAAA,IACT;AAEA,QAAI,YAAY,SAAU,GAAG;AAC3B,UAAI,UAAU;AACd,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AACpC,YAAI,IAAI,EAAE,OAAO,CAAC;AAClB,gBAAQ,GAAG;AAAA,UACT,KAAK;AACH,uBAAW;AACX;AAAA,UACF,KAAK;AACH,uBAAW;AACX;AAAA,UACF,KAAK;AACH,uBAAW;AACX;AAAA,UACF,KAAK;AACH,uBAAW;AACX;AAAA,UACF;AACE,uBAAW;AACX;AAAA,QACJ;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmB,SAAU,QAAQ;AACvC,UAAI,WAAW;AACf,eAAS,OAAO,UAAU,cAAc,WAAW,IAAI;AAEvD,UAAI,OAAO,MAAM,eAAe,IAAI,WAAW,SAAS;AACxD,UAAI,MAAM;AACV,UAAI,MAAM,OAAO;AAEjB,UAAI,GAAG,GAAG,IAAI,IAAI;AAElB,UAAI,SAAS;AAAA,QACX,gBAAM;AAAA,QACN,WAAM;AAAA,QACN,WAAM;AAAA,QACN,MAAM;AAAA,MACR;AAEA,UAAI,yBAAyB;AAAA,QAC3B,gBAAM;AAAA,QACN,WAAM;AAAA,QACN,WAAM;AAAA,QACN,MAAM;AAAA,MACR;AAEA,UAAI,QAAQ;AACZ,WAAK,IAAI,GAAG,IAAI,MAAM,KAAK,GAAG;AAC5B,aAAK,KAAK,OAAO,IAAI,OAAO,QAAQ;AACpC,aAAK,KAAK,OAAO,IAAI,IAAI,OAAO,QAAQ;AACxC,aAAK,IAAI,GAAG,IAAI,MAAM,KAAK,GAAG;AAC5B,cAAI;AAEJ,cACE,OAAO,KACP,IAAI,OACJ,OAAO,KACP,IAAI,OACJ,MAAM,OAAO,IAAI,KAAK,OAAO,IAAI,OAAO,QAAQ,CAAC,GACjD;AACA,gBAAI;AAAA,UACN;AAEA,cACE,OAAO,KACP,IAAI,OACJ,OAAO,IAAI,KACX,IAAI,IAAI,OACR,MAAM,OAAO,IAAI,KAAK,OAAO,IAAI,OAAO,QAAQ,CAAC,GACjD;AACA,iBAAK;AAAA,UACP,OAAO;AACL,iBAAK;AAAA,UACP;AAGA,mBACE,SAAS,KAAK,IAAI,KAAK,MAAM,uBAAuB,CAAC,IAAI,OAAO,CAAC;AAAA,QACrE;AAEA,iBAAS;AAAA,MACX;AAEA,UAAI,OAAO,KAAK,SAAS,GAAG;AAC1B,eACE,MAAM,UAAU,GAAG,MAAM,SAAS,OAAO,CAAC,IAC1C,MAAM,OAAO,CAAC,EAAE,KAAK,QAAG;AAAA,MAE5B;AAEA,aAAO,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC;AAAA,IAC5C;AAEA,UAAM,cAAc,SAAU,UAAU,QAAQ;AAC9C,iBAAW,YAAY;AAEvB,UAAI,WAAW,GAAG;AAChB,eAAO,iBAAiB,MAAM;AAAA,MAChC;AAEA,kBAAY;AACZ,eAAS,OAAO,UAAU,cAAc,WAAW,IAAI;AAEvD,UAAI,OAAO,MAAM,eAAe,IAAI,WAAW,SAAS;AACxD,UAAI,MAAM;AACV,UAAI,MAAM,OAAO;AAEjB,UAAI,GAAG,GAAG,GAAG;AAEb,UAAI,QAAQ,MAAM,WAAW,CAAC,EAAE,KAAK,cAAI;AACzC,UAAI,QAAQ,MAAM,WAAW,CAAC,EAAE,KAAK,IAAI;AAEzC,UAAI,QAAQ;AACZ,UAAI,OAAO;AACX,WAAK,IAAI,GAAG,IAAI,MAAM,KAAK,GAAG;AAC5B,YAAI,KAAK,OAAO,IAAI,OAAO,QAAQ;AACnC,eAAO;AACP,aAAK,IAAI,GAAG,IAAI,MAAM,KAAK,GAAG;AAC5B,cAAI;AAEJ,cACE,OAAO,KACP,IAAI,OACJ,OAAO,KACP,IAAI,OACJ,MAAM,OAAO,GAAG,KAAK,OAAO,IAAI,OAAO,QAAQ,CAAC,GAChD;AACA,gBAAI;AAAA,UACN;AAGA,kBAAQ,IAAI,QAAQ;AAAA,QACtB;AAEA,aAAK,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AAChC,mBAAS,OAAO;AAAA,QAClB;AAAA,MACF;AAEA,aAAO,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC;AAAA,IAC5C;AAEA,UAAM,oBAAoB,SAAU,SAAS,UAAU;AACrD,iBAAW,YAAY;AACvB,UAAI,SAAS,MAAM,eAAe;AAClC,eAAS,MAAM,GAAG,MAAM,QAAQ,OAAO;AACrC,iBAAS,MAAM,GAAG,MAAM,QAAQ,OAAO;AACrC,kBAAQ,YAAY,MAAM,OAAO,KAAK,GAAG,IAAI,UAAU;AACvD,kBAAQ,SAAS,MAAM,UAAU,MAAM,UAAU,UAAU,QAAQ;AAAA,QACrE;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAMA,EAAAD,QAAO,qBAAqB;AAAA,IAC1B,SAAS,SAAU,GAAG;AACpB,UAAI,QAAQ,CAAC;AACb,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AACpC,YAAI,IAAI,EAAE,WAAW,CAAC;AACtB,cAAM,KAAK,IAAI,GAAI;AAAA,MACrB;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,EAAAA,QAAO,gBAAgBA,QAAO,mBAAmB,SAAS;AAW1D,EAAAA,QAAO,sBAAsB,SAAU,aAAa,UAAU;AAG5D,QAAI,cAAc,WAAY;AAC5B,UAAI,MAAM,wBAAwB,WAAW;AAC7C,UAAI,OAAO,WAAY;AACrB,YAAI,IAAI,IAAI,KAAK;AACjB,YAAI,KAAK,GAAI,OAAM;AACnB,eAAO;AAAA,MACT;AAEA,UAAI,QAAQ;AACZ,UAAIG,cAAa,CAAC;AAClB,aAAO,MAAM;AACX,YAAI,KAAK,IAAI,KAAK;AAClB,YAAI,MAAM,GAAI;AACd,YAAI,KAAK,KAAK;AACd,YAAI,KAAK,KAAK;AACd,YAAI,KAAK,KAAK;AACd,YAAI,IAAI,OAAO,aAAc,MAAM,IAAK,EAAE;AAC1C,YAAI,IAAK,MAAM,IAAK;AACpB,QAAAA,YAAW,CAAC,IAAI;AAChB,iBAAS;AAAA,MACX;AACA,UAAI,SAAS,UAAU;AACrB,cAAM,QAAQ,SAAS;AAAA,MACzB;AAEA,aAAOA;AAAA,IACT,GAAG;AAEH,QAAI,cAAc,IAAI,WAAW,CAAC;AAElC,WAAO,SAAU,GAAG;AAClB,UAAI,QAAQ,CAAC;AACb,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AACpC,YAAI,IAAI,EAAE,WAAW,CAAC;AACtB,YAAI,IAAI,KAAK;AACX,gBAAM,KAAK,CAAC;AAAA,QACd,OAAO;AACL,cAAI,IAAI,WAAW,EAAE,OAAO,CAAC,CAAC;AAC9B,cAAI,OAAO,KAAK,UAAU;AACxB,iBAAK,IAAI,QAAS,GAAG;AAEnB,oBAAM,KAAK,CAAC;AAAA,YACd,OAAO;AAEL,oBAAM,KAAK,MAAM,CAAC;AAClB,oBAAM,KAAK,IAAI,GAAI;AAAA,YACrB;AAAA,UACF,OAAO;AACL,kBAAM,KAAK,WAAW;AAAA,UACxB;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAMA,MAAI,SAAS;AAAA,IACX,aAAa,KAAK;AAAA,IAClB,gBAAgB,KAAK;AAAA,IACrB,gBAAgB,KAAK;AAAA,IACrB,YAAY,KAAK;AAAA,EACnB;AAMA,MAAI,yBAAyB;AAAA,IAC3B,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AAMA,MAAI,gBAAgB;AAAA,IAClB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,EACd;AAMA,MAAI,UAAU,WAAY;AACxB,QAAI,yBAAyB;AAAA,MAC3B,CAAC;AAAA,MACD,CAAC,GAAG,EAAE;AAAA,MACN,CAAC,GAAG,EAAE;AAAA,MACN,CAAC,GAAG,EAAE;AAAA,MACN,CAAC,GAAG,EAAE;AAAA,MACN,CAAC,GAAG,EAAE;AAAA,MACN,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MACd,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MACd,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MACd,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MACd,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MACd,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MACd,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MACd,CAAC,GAAG,IAAI,IAAI,IAAI,EAAE;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,IAAI,EAAE;AAAA,MAClB,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG;AAAA,MACnB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG;AAAA,MACvB,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG;AAAA,MACxB,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG;AAAA,MACxB,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG;AAAA,MACxB,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG;AAAA,MACxB,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG;AAAA,MACxB,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG;AAAA,MACxB,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG;AAAA,MAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG;AAAA,MAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG;AAAA,MAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG;AAAA,MAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG;AAAA,MAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG;AAAA,IAC/B;AACA,QAAI,MACD,KAAK,KACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK;AACR,QAAI,MACD,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK;AACR,QAAI,WAAY,KAAK,KAAO,KAAK,KAAO,KAAK,KAAO,KAAK,IAAM,KAAK;AAEpE,QAAI,QAAQ,CAAC;AAEb,QAAI,cAAc,SAAU,MAAM;AAChC,UAAI,QAAQ;AACZ,aAAO,QAAQ,GAAG;AAChB,iBAAS;AACT,kBAAU;AAAA,MACZ;AACA,aAAO;AAAA,IACT;AAEA,UAAM,iBAAiB,SAAU,MAAM;AACrC,UAAI,IAAI,QAAQ;AAChB,aAAO,YAAY,CAAC,IAAI,YAAY,GAAG,KAAK,GAAG;AAC7C,aAAK,OAAQ,YAAY,CAAC,IAAI,YAAY,GAAG;AAAA,MAC/C;AACA,cAAS,QAAQ,KAAM,KAAK;AAAA,IAC9B;AAEA,UAAM,mBAAmB,SAAU,MAAM;AACvC,UAAI,IAAI,QAAQ;AAChB,aAAO,YAAY,CAAC,IAAI,YAAY,GAAG,KAAK,GAAG;AAC7C,aAAK,OAAQ,YAAY,CAAC,IAAI,YAAY,GAAG;AAAA,MAC/C;AACA,aAAQ,QAAQ,KAAM;AAAA,IACxB;AAEA,UAAM,qBAAqB,SAAU,YAAY;AAC/C,aAAO,uBAAuB,aAAa,CAAC;AAAA,IAC9C;AAEA,UAAM,kBAAkB,SAAU,aAAa;AAC7C,cAAQ,aAAa;AAAA,QACnB,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,oBAAQ,IAAI,KAAK,KAAK;AAAA,UACxB;AAAA,QACF,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,mBAAO,IAAI,KAAK;AAAA,UAClB;AAAA,QACF,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,mBAAO,IAAI,KAAK;AAAA,UAClB;AAAA,QACF,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,oBAAQ,IAAI,KAAK,KAAK;AAAA,UACxB;AAAA,QACF,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,oBAAQ,KAAK,MAAM,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,KAAK,KAAK;AAAA,UACxD;AAAA,QACF,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,mBAAS,IAAI,IAAK,IAAO,IAAI,IAAK,KAAM;AAAA,UAC1C;AAAA,QACF,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,oBAAU,IAAI,IAAK,IAAO,IAAI,IAAK,KAAM,KAAK;AAAA,UAChD;AAAA,QACF,KAAK,cAAc;AACjB,iBAAO,SAAU,GAAG,GAAG;AACrB,oBAAU,IAAI,IAAK,KAAO,IAAI,KAAK,KAAM,KAAK;AAAA,UAChD;AAAA,QAEF;AACE,gBAAM,qBAAqB;AAAA,MAC/B;AAAA,IACF;AAEA,UAAM,4BAA4B,SAAU,oBAAoB;AAC9D,UAAI,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC;AAC3B,eAAS,IAAI,GAAG,IAAI,oBAAoB,KAAK,GAAG;AAC9C,YAAI,EAAE,SAAS,aAAa,CAAC,GAAG,OAAO,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAEA,UAAM,kBAAkB,SAAU,MAAM,MAAM;AAC5C,UAAI,KAAK,QAAQ,OAAO,IAAI;AAG1B,gBAAQ,MAAM;AAAA,UACZ,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT;AACE,kBAAM,UAAU;AAAA,QACpB;AAAA,MACF,WAAW,OAAO,IAAI;AAGpB,gBAAQ,MAAM;AAAA,UACZ,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT;AACE,kBAAM,UAAU;AAAA,QACpB;AAAA,MACF,WAAW,OAAO,IAAI;AAGpB,gBAAQ,MAAM;AAAA,UACZ,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT,KAAK,OAAO;AACV,mBAAO;AAAA,UACT;AACE,kBAAM,UAAU;AAAA,QACpB;AAAA,MACF,OAAO;AACL,cAAM,UAAU;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,eAAe,SAAUH,SAAQ;AACrC,UAAI,cAAcA,QAAO,eAAe;AAExC,UAAI,YAAY;AAIhB,eAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,iBAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,cAAI,YAAY;AAChB,cAAI,OAAOA,QAAO,OAAO,KAAK,GAAG;AAEjC,mBAAS,IAAI,IAAI,KAAK,GAAG,KAAK,GAAG;AAC/B,gBAAI,MAAM,IAAI,KAAK,eAAe,MAAM,GAAG;AACzC;AAAA,YACF;AAEA,qBAAS,IAAI,IAAI,KAAK,GAAG,KAAK,GAAG;AAC/B,kBAAI,MAAM,IAAI,KAAK,eAAe,MAAM,GAAG;AACzC;AAAA,cACF;AAEA,kBAAI,KAAK,KAAK,KAAK,GAAG;AACpB;AAAA,cACF;AAEA,kBAAI,QAAQA,QAAO,OAAO,MAAM,GAAG,MAAM,CAAC,GAAG;AAC3C,6BAAa;AAAA,cACf;AAAA,YACF;AAAA,UACF;AAEA,cAAI,YAAY,GAAG;AACjB,yBAAa,IAAI,YAAY;AAAA,UAC/B;AAAA,QACF;AAAA,MACF;AAIA,eAAS,MAAM,GAAG,MAAM,cAAc,GAAG,OAAO,GAAG;AACjD,iBAAS,MAAM,GAAG,MAAM,cAAc,GAAG,OAAO,GAAG;AACjD,cAAI,QAAQ;AACZ,cAAIA,QAAO,OAAO,KAAK,GAAG,EAAG,UAAS;AACtC,cAAIA,QAAO,OAAO,MAAM,GAAG,GAAG,EAAG,UAAS;AAC1C,cAAIA,QAAO,OAAO,KAAK,MAAM,CAAC,EAAG,UAAS;AAC1C,cAAIA,QAAO,OAAO,MAAM,GAAG,MAAM,CAAC,EAAG,UAAS;AAC9C,cAAI,SAAS,KAAK,SAAS,GAAG;AAC5B,yBAAa;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAIA,eAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,iBAAS,MAAM,GAAG,MAAM,cAAc,GAAG,OAAO,GAAG;AACjD,cACEA,QAAO,OAAO,KAAK,GAAG,KACtB,CAACA,QAAO,OAAO,KAAK,MAAM,CAAC,KAC3BA,QAAO,OAAO,KAAK,MAAM,CAAC,KAC1BA,QAAO,OAAO,KAAK,MAAM,CAAC,KAC1BA,QAAO,OAAO,KAAK,MAAM,CAAC,KAC1B,CAACA,QAAO,OAAO,KAAK,MAAM,CAAC,KAC3BA,QAAO,OAAO,KAAK,MAAM,CAAC,GAC1B;AACA,yBAAa;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAEA,eAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,iBAAS,MAAM,GAAG,MAAM,cAAc,GAAG,OAAO,GAAG;AACjD,cACEA,QAAO,OAAO,KAAK,GAAG,KACtB,CAACA,QAAO,OAAO,MAAM,GAAG,GAAG,KAC3BA,QAAO,OAAO,MAAM,GAAG,GAAG,KAC1BA,QAAO,OAAO,MAAM,GAAG,GAAG,KAC1BA,QAAO,OAAO,MAAM,GAAG,GAAG,KAC1B,CAACA,QAAO,OAAO,MAAM,GAAG,GAAG,KAC3BA,QAAO,OAAO,MAAM,GAAG,GAAG,GAC1B;AACA,yBAAa;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAIA,UAAI,YAAY;AAEhB,eAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,iBAAS,MAAM,GAAG,MAAM,aAAa,OAAO,GAAG;AAC7C,cAAIA,QAAO,OAAO,KAAK,GAAG,GAAG;AAC3B,yBAAa;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAEA,UAAI,QACF,KAAK,IAAK,MAAM,YAAa,cAAc,cAAc,EAAE,IAAI;AACjE,mBAAa,QAAQ;AAErB,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,GAAG;AAMH,MAAI,UAAU,WAAY;AACxB,QAAI,YAAY,IAAI,MAAM,GAAG;AAC7B,QAAI,YAAY,IAAI,MAAM,GAAG;AAG7B,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC7B,gBAAU,CAAC,IAAI,KAAK;AAAA,IACtB;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,gBAAU,CAAC,IACT,UAAU,IAAI,CAAC,IACf,UAAU,IAAI,CAAC,IACf,UAAU,IAAI,CAAC,IACf,UAAU,IAAI,CAAC;AAAA,IACnB;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,gBAAU,UAAU,CAAC,CAAC,IAAI;AAAA,IAC5B;AAEA,QAAI,QAAQ,CAAC;AAEb,UAAM,OAAO,SAAU,GAAG;AACxB,UAAI,IAAI,GAAG;AACT,cAAM,UAAU,IAAI;AAAA,MACtB;AAEA,aAAO,UAAU,CAAC;AAAA,IACpB;AAEA,UAAM,OAAO,SAAU,GAAG;AACxB,aAAO,IAAI,GAAG;AACZ,aAAK;AAAA,MACP;AAEA,aAAO,KAAK,KAAK;AACf,aAAK;AAAA,MACP;AAEA,aAAO,UAAU,CAAC;AAAA,IACpB;AAEA,WAAO;AAAA,EACT,GAAG;AAMH,WAAS,aAAa,KAAK,OAAO;AAChC,QAAI,OAAO,IAAI,UAAU,aAAa;AACpC,YAAM,IAAI,SAAS,MAAM;AAAA,IAC3B;AAEA,QAAI,QAAQ,WAAY;AACtB,UAAI,SAAS;AACb,aAAO,SAAS,IAAI,UAAU,IAAI,MAAM,KAAK,GAAG;AAC9C,kBAAU;AAAA,MACZ;AACA,UAAII,QAAO,IAAI,MAAM,IAAI,SAAS,SAAS,KAAK;AAChD,eAAS,IAAI,GAAG,IAAI,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC/C,QAAAA,MAAK,CAAC,IAAI,IAAI,IAAI,MAAM;AAAA,MAC1B;AACA,aAAOA;AAAA,IACT,GAAG;AAEH,QAAI,QAAQ,CAAC;AAEb,UAAM,QAAQ,SAAU,OAAO;AAC7B,aAAO,KAAK,KAAK;AAAA,IACnB;AAEA,UAAM,YAAY,WAAY;AAC5B,aAAO,KAAK;AAAA,IACd;AAEA,UAAM,WAAW,SAAU,GAAG;AAC5B,UAAIC,OAAM,IAAI,MAAM,MAAM,UAAU,IAAI,EAAE,UAAU,IAAI,CAAC;AAEzD,eAAS,IAAI,GAAG,IAAI,MAAM,UAAU,GAAG,KAAK,GAAG;AAC7C,iBAAS,IAAI,GAAG,IAAI,EAAE,UAAU,GAAG,KAAK,GAAG;AACzC,UAAAA,KAAI,IAAI,CAAC,KAAK,OAAO;AAAA,YACnB,OAAO,KAAK,MAAM,MAAM,CAAC,CAAC,IAAI,OAAO,KAAK,EAAE,MAAM,CAAC,CAAC;AAAA,UACtD;AAAA,QACF;AAAA,MACF;AAEA,aAAO,aAAaA,MAAK,CAAC;AAAA,IAC5B;AAEA,UAAM,MAAM,SAAU,GAAG;AACvB,UAAI,MAAM,UAAU,IAAI,EAAE,UAAU,IAAI,GAAG;AACzC,eAAO;AAAA,MACT;AAEA,UAAI,QAAQ,OAAO,KAAK,MAAM,MAAM,CAAC,CAAC,IAAI,OAAO,KAAK,EAAE,MAAM,CAAC,CAAC;AAEhE,UAAIA,OAAM,IAAI,MAAM,MAAM,UAAU,CAAC;AACrC,eAAS,IAAI,GAAG,IAAI,MAAM,UAAU,GAAG,KAAK,GAAG;AAC7C,QAAAA,KAAI,CAAC,IAAI,MAAM,MAAM,CAAC;AAAA,MACxB;AAEA,eAAS,IAAI,GAAG,IAAI,EAAE,UAAU,GAAG,KAAK,GAAG;AACzC,QAAAA,KAAI,CAAC,KAAK,OAAO,KAAK,OAAO,KAAK,EAAE,MAAM,CAAC,CAAC,IAAI,KAAK;AAAA,MACvD;AAGA,aAAO,aAAaA,MAAK,CAAC,EAAE,IAAI,CAAC;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,aAAa,WAAY;AAC3B,QAAI,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOnB,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,CAAC;AAAA;AAAA,MAGT,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA;AAAA,MAGV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA;AAAA,MAGV,CAAC,GAAG,KAAK,EAAE;AAAA,MACX,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,CAAC;AAAA;AAAA,MAGT,CAAC,GAAG,KAAK,GAAG;AAAA,MACZ,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGrB,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA;AAAA,MAGV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,EAAE;AAAA,MACV,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGrB,CAAC,GAAG,KAAK,EAAE;AAAA,MACX,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGrB,CAAC,GAAG,KAAK,GAAG;AAAA,MACZ,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGrB,CAAC,GAAG,KAAK,EAAE;AAAA,MACX,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGrB,CAAC,GAAG,KAAK,IAAI,GAAG,KAAK,EAAE;AAAA,MACvB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGrB,CAAC,GAAG,KAAK,GAAG;AAAA,MACZ,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,IAAI,GAAG,KAAK,EAAE;AAAA,MACvB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,IAAI,GAAG,KAAK,EAAE;AAAA,MACvB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACrB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,IAAI,IAAI,EAAE;AAAA,MACX,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,IAAI,IAAI,EAAE;AAAA,MACX,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,EAAE;AAAA;AAAA,MAGX,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,GAAG;AAAA,MAC1B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MACzB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,IAAI,KAAK,GAAG;AAAA,MACb,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,GAAG;AAAA,MAC1B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGtB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AAAA,MACtB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA;AAAA,MAGvB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG;AAAA,MAC1B,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,IACzB;AAEA,QAAI,YAAY,SAAU,YAAY,WAAW;AAC/C,UAAIC,SAAQ,CAAC;AACb,MAAAA,OAAM,aAAa;AACnB,MAAAA,OAAM,YAAY;AAClB,aAAOA;AAAA,IACT;AAEA,QAAI,QAAQ,CAAC;AAEb,QAAI,kBAAkB,SAAU,YAAY,sBAAsB;AAChE,cAAQ,sBAAsB;AAAA,QAC5B,KAAK,uBAAuB;AAC1B,iBAAO,gBAAgB,aAAa,KAAK,IAAI,CAAC;AAAA,QAChD,KAAK,uBAAuB;AAC1B,iBAAO,gBAAgB,aAAa,KAAK,IAAI,CAAC;AAAA,QAChD,KAAK,uBAAuB;AAC1B,iBAAO,gBAAgB,aAAa,KAAK,IAAI,CAAC;AAAA,QAChD,KAAK,uBAAuB;AAC1B,iBAAO,gBAAgB,aAAa,KAAK,IAAI,CAAC;AAAA,QAChD;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAEA,UAAM,cAAc,SAAU,YAAY,sBAAsB;AAC9D,UAAI,UAAU,gBAAgB,YAAY,oBAAoB;AAE9D,UAAI,OAAO,WAAW,aAAa;AACjC,cACE,+BACA,aACA,2BACA;AAAA,MAEJ;AAEA,UAAI,SAAS,QAAQ,SAAS;AAE9B,UAAI,OAAO,CAAC;AAEZ,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,YAAI,QAAQ,QAAQ,IAAI,IAAI,CAAC;AAC7B,YAAI,aAAa,QAAQ,IAAI,IAAI,CAAC;AAClC,YAAI,YAAY,QAAQ,IAAI,IAAI,CAAC;AAEjC,iBAAS,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG;AACjC,eAAK,KAAK,UAAU,YAAY,SAAS,CAAC;AAAA,QAC5C;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,GAAG;AAMH,MAAI,cAAc,WAAY;AAC5B,QAAI,UAAU,CAAC;AACf,QAAI,UAAU;AAEd,QAAI,QAAQ,CAAC;AAEb,UAAM,YAAY,WAAY;AAC5B,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,SAAU,OAAO;AAC7B,UAAI,WAAW,KAAK,MAAM,QAAQ,CAAC;AACnC,cAAS,QAAQ,QAAQ,MAAO,IAAK,QAAQ,IAAO,MAAM;AAAA,IAC5D;AAEA,UAAM,MAAM,SAAU,KAAK,QAAQ;AACjC,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,cAAM,QAAS,QAAS,SAAS,IAAI,IAAM,MAAM,CAAC;AAAA,MACpD;AAAA,IACF;AAEA,UAAM,kBAAkB,WAAY;AAClC,aAAO;AAAA,IACT;AAEA,UAAM,SAAS,SAAU,KAAK;AAC5B,UAAI,WAAW,KAAK,MAAM,UAAU,CAAC;AACrC,UAAI,QAAQ,UAAU,UAAU;AAC9B,gBAAQ,KAAK,CAAC;AAAA,MAChB;AAEA,UAAI,KAAK;AACP,gBAAQ,QAAQ,KAAK,QAAS,UAAU;AAAA,MAC1C;AAEA,iBAAW;AAAA,IACb;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,WAAW,SAAU,MAAM;AAC7B,QAAI,QAAQ,OAAO;AACnB,QAAI,QAAQ;AAEZ,QAAI,QAAQ,CAAC;AAEb,UAAM,UAAU,WAAY;AAC1B,aAAO;AAAA,IACT;AAEA,UAAM,YAAY,SAAU,QAAQ;AAClC,aAAO,MAAM;AAAA,IACf;AAEA,UAAM,QAAQ,SAAU,QAAQ;AAC9B,UAAIC,QAAO;AAEX,UAAI,IAAI;AAER,aAAO,IAAI,IAAIA,MAAK,QAAQ;AAC1B,eAAO,IAAI,SAASA,MAAK,UAAU,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE;AACjD,aAAK;AAAA,MACP;AAEA,UAAI,IAAIA,MAAK,QAAQ;AACnB,YAAIA,MAAK,SAAS,KAAK,GAAG;AACxB,iBAAO,IAAI,SAASA,MAAK,UAAU,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC;AAAA,QAClD,WAAWA,MAAK,SAAS,KAAK,GAAG;AAC/B,iBAAO,IAAI,SAASA,MAAK,UAAU,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAEA,QAAI,WAAW,SAAU,GAAG;AAC1B,UAAI,MAAM;AACV,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AACpC,cAAM,MAAM,KAAK,UAAU,EAAE,OAAO,CAAC,CAAC;AAAA,MACxC;AACA,aAAO;AAAA,IACT;AAEA,QAAI,YAAY,SAAU,GAAG;AAC3B,UAAI,OAAO,KAAK,KAAK,KAAK;AACxB,eAAO,EAAE,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC;AAAA,MAC3C;AACA,YAAM,mBAAmB;AAAA,IAC3B;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,aAAa,SAAU,MAAM;AAC/B,QAAI,QAAQ,OAAO;AACnB,QAAI,QAAQ;AAEZ,QAAI,QAAQ,CAAC;AAEb,UAAM,UAAU,WAAY;AAC1B,aAAO;AAAA,IACT;AAEA,UAAM,YAAY,SAAU,QAAQ;AAClC,aAAO,MAAM;AAAA,IACf;AAEA,UAAM,QAAQ,SAAU,QAAQ;AAC9B,UAAI,IAAI;AAER,UAAI,IAAI;AAER,aAAO,IAAI,IAAI,EAAE,QAAQ;AACvB,eAAO,IAAI,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE,OAAO,IAAI,CAAC,CAAC,GAAG,EAAE;AACnE,aAAK;AAAA,MACP;AAEA,UAAI,IAAI,EAAE,QAAQ;AAChB,eAAO,IAAI,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC;AAAA,MACpC;AAAA,IACF;AAEA,QAAI,UAAU,SAAU,GAAG;AACzB,UAAI,OAAO,KAAK,KAAK,KAAK;AACxB,eAAO,EAAE,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC;AAAA,MAC3C,WAAW,OAAO,KAAK,KAAK,KAAK;AAC/B,eAAO,EAAE,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI;AAAA,MAC/C,OAAO;AACL,gBAAQ,GAAG;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO;AAAA,UACT;AACE,kBAAM,mBAAmB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,aAAa,SAAU,MAAM;AAC/B,QAAI,QAAQ,OAAO;AACnB,QAAI,QAAQ;AACZ,QAAI,SAASP,QAAO,cAAc,IAAI;AAEtC,QAAI,QAAQ,CAAC;AAEb,UAAM,UAAU,WAAY;AAC1B,aAAO;AAAA,IACT;AAEA,UAAM,YAAY,SAAU,QAAQ;AAClC,aAAO,OAAO;AAAA,IAChB;AAEA,UAAM,QAAQ,SAAU,QAAQ;AAC9B,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACzC,eAAO,IAAI,OAAO,CAAC,GAAG,CAAC;AAAA,MACzB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,UAAU,SAAU,MAAM;AAC5B,QAAI,QAAQ,OAAO;AACnB,QAAI,QAAQ;AAEZ,QAAI,gBAAgBA,QAAO,mBAAmB,MAAM;AACpD,QAAI,CAAC,eAAe;AAClB,YAAM;AAAA,IACR;AACA,MAAE,SAAU,GAAG,MAAM;AAEnB,UAAI,OAAO,cAAc,CAAC;AAC1B,UAAI,KAAK,UAAU,MAAO,KAAK,CAAC,KAAK,IAAK,KAAK,CAAC,MAAM,MAAM;AAC1D,cAAM;AAAA,MACR;AAAA,IACF,GAAG,UAAU,KAAM;AAEnB,QAAI,SAAS,cAAc,IAAI;AAE/B,QAAI,QAAQ,CAAC;AAEb,UAAM,UAAU,WAAY;AAC1B,aAAO;AAAA,IACT;AAEA,UAAM,YAAY,SAAU,QAAQ;AAClC,aAAO,CAAC,EAAE,OAAO,SAAS;AAAA,IAC5B;AAEA,UAAM,QAAQ,SAAU,QAAQ;AAC9B,UAAIO,QAAO;AAEX,UAAI,IAAI;AAER,aAAO,IAAI,IAAIA,MAAK,QAAQ;AAC1B,YAAI,KAAM,MAAOA,MAAK,CAAC,MAAM,IAAM,MAAOA,MAAK,IAAI,CAAC;AAEpD,YAAI,SAAU,KAAK,KAAK,OAAQ;AAC9B,eAAK;AAAA,QACP,WAAW,SAAU,KAAK,KAAK,OAAQ;AACrC,eAAK;AAAA,QACP,OAAO;AACL,gBAAM,sBAAsB,IAAI,KAAK,MAAM;AAAA,QAC7C;AAEA,aAAM,MAAM,IAAK,OAAQ,OAAQ,IAAI;AAErC,eAAO,IAAI,GAAG,EAAE;AAEhB,aAAK;AAAA,MACP;AAEA,UAAI,IAAIA,MAAK,QAAQ;AACnB,cAAM,sBAAsB,IAAI;AAAA,MAClC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAUA,MAAI,wBAAwB,WAAY;AACtC,QAAI,SAAS,CAAC;AAEd,QAAI,QAAQ,CAAC;AAEb,UAAM,YAAY,SAAU,GAAG;AAC7B,aAAO,KAAK,IAAI,GAAI;AAAA,IACtB;AAEA,UAAM,aAAa,SAAU,GAAG;AAC9B,YAAM,UAAU,CAAC;AACjB,YAAM,UAAU,MAAM,CAAC;AAAA,IACzB;AAEA,UAAM,aAAa,SAAU,GAAG,KAAK,KAAK;AACxC,YAAM,OAAO;AACb,YAAM,OAAO,EAAE;AACf,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,cAAM,UAAU,EAAE,IAAI,GAAG,CAAC;AAAA,MAC5B;AAAA,IACF;AAEA,UAAM,cAAc,SAAU,GAAG;AAC/B,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AACpC,cAAM,UAAU,EAAE,WAAW,CAAC,CAAC;AAAA,MACjC;AAAA,IACF;AAEA,UAAM,cAAc,WAAY;AAC9B,aAAO;AAAA,IACT;AAEA,UAAM,WAAW,WAAY;AAC3B,UAAI,IAAI;AACR,WAAK;AACL,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACzC,YAAI,IAAI,GAAG;AACT,eAAK;AAAA,QACP;AACA,aAAK,OAAO,CAAC;AAAA,MACf;AACA,WAAK;AACL,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,2BAA2B,WAAY;AACzC,QAAI,UAAU;AACd,QAAI,UAAU;AACd,QAAI,UAAU;AACd,QAAI,UAAU;AAEd,QAAI,QAAQ,CAAC;AAEb,QAAI,eAAe,SAAU,GAAG;AAC9B,iBAAW,OAAO,aAAa,OAAO,IAAI,EAAI,CAAC;AAAA,IACjD;AAEA,QAAI,SAAS,SAAU,GAAG;AACxB,UAAI,IAAI,GAAG;AAAA,MAEX,WAAW,IAAI,IAAI;AACjB,eAAO,KAAO;AAAA,MAChB,WAAW,IAAI,IAAI;AACjB,eAAO,MAAQ,IAAI;AAAA,MACrB,WAAW,IAAI,IAAI;AACjB,eAAO,MAAQ,IAAI;AAAA,MACrB,WAAW,KAAK,IAAI;AAClB,eAAO;AAAA,MACT,WAAW,KAAK,IAAI;AAClB,eAAO;AAAA,MACT;AACA,YAAM,OAAO;AAAA,IACf;AAEA,UAAM,YAAY,SAAU,GAAG;AAC7B,gBAAW,WAAW,IAAM,IAAI;AAChC,iBAAW;AACX,iBAAW;AAEX,aAAO,WAAW,GAAG;AACnB,qBAAa,YAAa,UAAU,CAAE;AACtC,mBAAW;AAAA,MACb;AAAA,IACF;AAEA,UAAM,QAAQ,WAAY;AACxB,UAAI,UAAU,GAAG;AACf,qBAAa,WAAY,IAAI,OAAQ;AACrC,kBAAU;AACV,kBAAU;AAAA,MACZ;AAEA,UAAI,UAAU,KAAK,GAAG;AAEpB,YAAI,SAAS,IAAK,UAAU;AAC5B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,qBAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAEA,UAAM,WAAW,WAAY;AAC3B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,0BAA0B,SAAU,KAAK;AAC3C,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,UAAU;AACd,QAAI,UAAU;AAEd,QAAI,QAAQ,CAAC;AAEb,UAAM,OAAO,WAAY;AACvB,aAAO,UAAU,GAAG;AAClB,YAAI,QAAQ,KAAK,QAAQ;AACvB,cAAI,WAAW,GAAG;AAChB,mBAAO;AAAA,UACT;AACA,gBAAM,6BAA6B;AAAA,QACrC;AAEA,YAAI,IAAI,KAAK,OAAO,IAAI;AACxB,gBAAQ;AAER,YAAI,KAAK,KAAK;AACZ,oBAAU;AACV,iBAAO;AAAA,QACT,WAAW,EAAE,MAAM,MAAM,GAAG;AAE1B;AAAA,QACF;AAEA,kBAAW,WAAW,IAAK,OAAO,EAAE,WAAW,CAAC,CAAC;AACjD,mBAAW;AAAA,MACb;AAEA,UAAI,IAAK,YAAa,UAAU,IAAM;AACtC,iBAAW;AACX,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,SAAU,GAAG;AACxB,UAAI,MAAQ,KAAK,KAAK,IAAM;AAC1B,eAAO,IAAI;AAAA,MACb,WAAW,MAAQ,KAAK,KAAK,KAAM;AACjC,eAAO,IAAI,KAAO;AAAA,MACpB,WAAW,MAAQ,KAAK,KAAK,IAAM;AACjC,eAAO,IAAI,KAAO;AAAA,MACpB,WAAW,KAAK,IAAM;AACpB,eAAO;AAAA,MACT,WAAW,KAAK,IAAM;AACpB,eAAO;AAAA,MACT,OAAO;AACL,cAAM,OAAO;AAAA,MACf;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAMA,MAAI,WAAW,SAAU,OAAO,QAAQ;AACtC,QAAI,SAAS;AACb,QAAI,UAAU;AACd,QAAI,QAAQ,IAAI,MAAM,QAAQ,MAAM;AAEpC,QAAI,QAAQ,CAAC;AAEb,UAAM,WAAW,SAAU,GAAG,GAAG,OAAO;AACtC,YAAM,IAAI,SAAS,CAAC,IAAI;AAAA,IAC1B;AAEA,UAAM,QAAQ,SAAU,KAAK;AAI3B,UAAI,YAAY,QAAQ;AAKxB,UAAI,WAAW,MAAM;AACrB,UAAI,WAAW,OAAO;AAEtB,UAAI,UAAU,GAAI;AAClB,UAAI,UAAU,CAAC;AACf,UAAI,UAAU,CAAC;AAMf,UAAI,UAAU,CAAI;AAClB,UAAI,UAAU,CAAI;AAClB,UAAI,UAAU,CAAI;AAGlB,UAAI,UAAU,GAAI;AAClB,UAAI,UAAU,GAAI;AAClB,UAAI,UAAU,GAAI;AAKlB,UAAI,YAAY,GAAG;AACnB,UAAI,WAAW,CAAC;AAChB,UAAI,WAAW,CAAC;AAChB,UAAI,WAAW,MAAM;AACrB,UAAI,WAAW,OAAO;AACtB,UAAI,UAAU,CAAC;AAQf,UAAI,iBAAiB;AACrB,UAAI,SAAS,aAAa,cAAc;AAExC,UAAI,UAAU,cAAc;AAE5B,UAAI,SAAS;AAEb,aAAO,OAAO,SAAS,SAAS,KAAK;AACnC,YAAI,UAAU,GAAG;AACjB,YAAI,WAAW,QAAQ,QAAQ,GAAG;AAClC,kBAAU;AAAA,MACZ;AAEA,UAAI,UAAU,OAAO,SAAS,MAAM;AACpC,UAAI,WAAW,QAAQ,QAAQ,OAAO,SAAS,MAAM;AACrD,UAAI,UAAU,CAAI;AAIlB,UAAI,YAAY,GAAG;AAAA,IACrB;AAEA,QAAI,kBAAkB,SAAU,KAAK;AACnC,UAAI,OAAO;AACX,UAAI,aAAa;AACjB,UAAI,aAAa;AAEjB,UAAID,SAAQ,CAAC;AAEb,MAAAA,OAAM,QAAQ,SAAU,MAAM,QAAQ;AACpC,YAAI,SAAS,UAAU,GAAG;AACxB,gBAAM;AAAA,QACR;AAEA,eAAO,aAAa,UAAU,GAAG;AAC/B,eAAK,UAAU,OAAS,QAAQ,aAAc,WAAW;AACzD,oBAAU,IAAI;AACd,oBAAU,IAAI;AACd,uBAAa;AACb,uBAAa;AAAA,QACf;AAEA,qBAAc,QAAQ,aAAc;AACpC,qBAAa,aAAa;AAAA,MAC5B;AAEA,MAAAA,OAAM,QAAQ,WAAY;AACxB,YAAI,aAAa,GAAG;AAClB,eAAK,UAAU,UAAU;AAAA,QAC3B;AAAA,MACF;AAEA,aAAOA;AAAA,IACT;AAEA,QAAI,eAAe,SAAU,gBAAgB;AAC3C,UAAI,YAAY,KAAK;AACrB,UAAI,WAAW,KAAK,kBAAkB;AACtC,UAAI,YAAY,iBAAiB;AAGjC,UAAI,QAAQ,SAAS;AAErB,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AACrC,cAAM,IAAI,OAAO,aAAa,CAAC,CAAC;AAAA,MAClC;AACA,YAAM,IAAI,OAAO,aAAa,SAAS,CAAC;AACxC,YAAM,IAAI,OAAO,aAAa,OAAO,CAAC;AAEtC,UAAI,UAAU,sBAAsB;AACpC,UAAI,SAAS,gBAAgB,OAAO;AAGpC,aAAO,MAAM,WAAW,SAAS;AAEjC,UAAI,YAAY;AAEhB,UAAI,IAAI,OAAO,aAAa,MAAM,SAAS,CAAC;AAC5C,mBAAa;AAEb,aAAO,YAAY,MAAM,QAAQ;AAC/B,YAAI,IAAI,OAAO,aAAa,MAAM,SAAS,CAAC;AAC5C,qBAAa;AAEb,YAAI,MAAM,SAAS,IAAI,CAAC,GAAG;AACzB,cAAI,IAAI;AAAA,QACV,OAAO;AACL,iBAAO,MAAM,MAAM,QAAQ,CAAC,GAAG,SAAS;AAExC,cAAI,MAAM,KAAK,IAAI,MAAO;AACxB,gBAAI,MAAM,KAAK,KAAK,KAAK,WAAW;AAClC,2BAAa;AAAA,YACf;AAEA,kBAAM,IAAI,IAAI,CAAC;AAAA,UACjB;AAEA,cAAI;AAAA,QACN;AAAA,MACF;AAEA,aAAO,MAAM,MAAM,QAAQ,CAAC,GAAG,SAAS;AAGxC,aAAO,MAAM,SAAS,SAAS;AAE/B,aAAO,MAAM;AAEb,aAAO,QAAQ,YAAY;AAAA,IAC7B;AAEA,QAAI,WAAW,WAAY;AACzB,UAAI,OAAO,CAAC;AACZ,UAAI,QAAQ;AAEZ,UAAIA,SAAQ,CAAC;AAEb,MAAAA,OAAM,MAAM,SAAU,KAAK;AACzB,YAAIA,OAAM,SAAS,GAAG,GAAG;AACvB,gBAAM,aAAa;AAAA,QACrB;AACA,aAAK,GAAG,IAAI;AACZ,iBAAS;AAAA,MACX;AAEA,MAAAA,OAAM,OAAO,WAAY;AACvB,eAAO;AAAA,MACT;AAEA,MAAAA,OAAM,UAAU,SAAU,KAAK;AAC7B,eAAO,KAAK,GAAG;AAAA,MACjB;AAEA,MAAAA,OAAM,WAAW,SAAU,KAAK;AAC9B,eAAO,OAAO,KAAK,GAAG,KAAK;AAAA,MAC7B;AAEA,aAAOA;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAEA,MAAI,gBAAgB,SAAU,OAAO,QAAQ,UAAU;AACrD,QAAI,MAAM,SAAS,OAAO,MAAM;AAChC,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,eAAS,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG;AACjC,YAAI,SAAS,GAAG,GAAG,SAAS,GAAG,CAAC,CAAC;AAAA,MACnC;AAAA,IACF;AAEA,QAAI,IAAI,sBAAsB;AAC9B,QAAI,MAAM,CAAC;AAEX,QAAI,SAAS,yBAAyB;AACtC,QAAI,QAAQ,EAAE,YAAY;AAC1B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,aAAO,UAAU,MAAM,CAAC,CAAC;AAAA,IAC3B;AACA,WAAO,MAAM;AAEb,WAAO,2BAA2B;AAAA,EACpC;AAKA,SAAON;AACT,GAAG;AAGH,EAAE,WAAY;AACZ,SAAO,mBAAmB,OAAO,IAAI,SAAU,GAAG;AAEhD,aAAS,YAAY,KAAK;AACxB,UAAI,OAAO,CAAC;AACZ,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,YAAI,WAAW,IAAI,WAAW,CAAC;AAC/B,YAAI,WAAW,IAAM,MAAK,KAAK,QAAQ;AAAA,iBAC9B,WAAW,MAAO;AACzB,eAAK,KAAK,MAAQ,YAAY,GAAI,MAAQ,WAAW,EAAK;AAAA,QAC5D,WAAW,WAAW,SAAU,YAAY,OAAQ;AAClD,eAAK;AAAA,YACH,MAAQ,YAAY;AAAA,YACpB,MAAS,YAAY,IAAK;AAAA,YAC1B,MAAQ,WAAW;AAAA,UACrB;AAAA,QACF,OAEK;AACH;AAIA,qBACE,UACG,WAAW,SAAU,KAAO,IAAI,WAAW,CAAC,IAAI;AACrD,eAAK;AAAA,YACH,MAAQ,YAAY;AAAA,YACpB,MAAS,YAAY,KAAM;AAAA,YAC3B,MAAS,YAAY,IAAK;AAAA,YAC1B,MAAQ,WAAW;AAAA,UACrB;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,WAAO,YAAY,CAAC;AAAA,EACtB;AACF,GAAG;AAEH,IAAO,iBAAQ;",
  "names": ["qrcode", "typeNumber", "errorCorrectionLevel", "unicodeMap", "_num", "num", "_this", "data"]
}
