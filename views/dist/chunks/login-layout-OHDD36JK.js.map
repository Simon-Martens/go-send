{
  "version": 3,
  "sources": ["../../src/ui/login-layout.mjs"],
  "sourcesContent": ["import {\n  translateElement,\n  translate,\n  arrayToB64,\n} from \"../utils.mjs\";\nimport {\n  decodeSalt,\n  deriveKeyMaterial,\n  normalizeKDFSettings,\n  signChallenge,\n} from \"../crypto/credentials.mjs\";\nimport storage from \"../storage.mjs\";\nimport UserSecrets from \"../userSecrets.mjs\";\nimport { syncOwnedFiles } from \"../syncFiles.mjs\";\n\nclass LoginLayoutElement extends HTMLElement {\n  constructor() {\n    super();\n    this.form = null;\n    this.emailInput = null;\n    this.passwordInput = null;\n    this.errorElement = null;\n    this.submitButton = null;\n    this.passwordToggle = null;\n\n    this._frame = null;\n    this._templateMounted = false;\n    this._storageCleared = false;\n\n    this._boundHandlers = {\n      submit: this.handleSubmit.bind(this),\n      togglePassword: this.togglePasswordVisibility.bind(this),\n    };\n  }\n\n  connectedCallback() {\n    // Clear all localStorage when login page is first opened\n    // If user is redirected here, session is invalid and all state should be wiped\n    if (!this._storageCleared) {\n      storage.clearAll();\n      this._storageCleared = true;\n    }\n\n    if (!this._templateMounted) {\n      const template = document.getElementById(\"login-layout\");\n      if (!template) {\n        console.error(\"Template #login-layout not found\");\n        return;\n      }\n      const content = template.content.cloneNode(true);\n      this.appendChild(content);\n      this._templateMounted = true;\n    }\n\n    if (this._frame !== null) {\n      cancelAnimationFrame(this._frame);\n    }\n\n    this._frame = requestAnimationFrame(() => {\n      this._frame = null;\n      if (!this.isConnected) {\n        return;\n      }\n\n      translateElement(this);\n\n      this.form = this.querySelector('[data-role=\"login-form\"]');\n      this.emailInput = this.querySelector('[data-role=\"email-input\"]');\n      this.passwordInput = this.querySelector('[data-role=\"password-input\"]');\n      this.errorElement = this.querySelector('[data-role=\"error\"]');\n      this.submitButton = this.querySelector('[data-role=\"submit\"]');\n      this.passwordToggle = this.querySelector('[data-role=\"toggle-password\"]');\n\n      if (this.form) {\n        this.form.addEventListener(\"submit\", this._boundHandlers.submit);\n      }\n      if (this.passwordToggle) {\n        this.passwordToggle.addEventListener(\"click\", this._boundHandlers.togglePassword);\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    if (this._frame !== null) {\n      cancelAnimationFrame(this._frame);\n      this._frame = null;\n    }\n\n    if (this.form) {\n      this.form.removeEventListener(\"submit\", this._boundHandlers.submit);\n    }\n\n    if (this.passwordToggle) {\n      this.passwordToggle.removeEventListener(\"click\", this._boundHandlers.togglePassword);\n    }\n  }\n\n  togglePasswordVisibility(event) {\n    event.preventDefault();\n    if (!this.passwordInput) return;\n    this.passwordInput.type = this.passwordInput.type === \"password\" ? \"text\" : \"password\";\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.hideError();\n\n    const email = this.emailInput?.value.trim();\n    const password = this.passwordInput?.value;\n\n    if (!email || !this.isValidEmail(email)) {\n      this.showError(translate(\"authErrorInvalidEmail\"));\n      return;\n    }\n\n    if (!password || password.length < 10) {\n      this.showError(translate(\"authErrorPasswordLength\"));\n      return;\n    }\n\n    if (!window.crypto || !window.crypto.subtle) {\n      this.showError(translate(\"authErrorCryptoUnsupported\"));\n      return;\n    }\n\n    if (this.submitButton) {\n      this.submitButton.disabled = true;\n      this.setSubmitLabel(\"loginSubmitting\");\n    }\n\n    try {\n      const challenge = await this.requestChallenge(email);\n      const saltBytes = decodeSalt(challenge.salt);\n      const settings = normalizeKDFSettings(challenge.kdf);\n\n      let keyMaterial;\n      try {\n        try {\n          keyMaterial = await deriveKeyMaterial(password, saltBytes, settings);\n        } finally {\n          if (this.passwordInput) this.passwordInput.value = \"\";\n        }\n\n        const signature = await signChallenge(\n          keyMaterial.edSeed,\n          challenge.nonce,\n        );\n        const loginResult = await this.submitLogin(email, challenge.challenge_id, signature);\n\n        let userSecrets = null;\n        try {\n          userSecrets = UserSecrets.fromKeyMaterial({\n            email,\n            name: loginResult.user?.name,\n            role: loginResult.user?.role,\n            settings: loginResult.user?.settings,\n            salt: arrayToB64(saltBytes),\n            x25519Seed: keyMaterial.x25519Seed,\n            version: loginResult.app_version,\n          });\n          storage.clearUser();\n          storage.setUser(userSecrets);\n        } catch (persistError) {\n          console.warn(\n            \"[LoginLayout] Failed to persist user secrets\",\n            persistError,\n          );\n        }\n\n        if (userSecrets) {\n          await syncOwnedFiles(userSecrets, { clearFirst: true });\n        }\n\n        window.location.assign(\"/\");\n      } finally {\n        if (keyMaterial?.edSeed) {\n          keyMaterial.edSeed.fill(0);\n        }\n        if (keyMaterial?.x25519Seed) {\n          keyMaterial.x25519Seed.fill(0);\n        }\n        saltBytes?.fill(0);\n      }\n    } catch (error) {\n      console.error(\"[LoginLayout] Login failed\", error);\n      this.showError(error.message || translate(\"loginErrorGeneric\"));\n      if (this.submitButton) {\n        this.submitButton.disabled = false;\n        this.setSubmitLabel(\"loginSubmitButton\");\n      }\n    }\n  }\n\n  async requestChallenge(email) {\n    const response = await fetch(\"/auth/challenge\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    if (!response.ok) {\n      let serverMessage = \"\";\n      try {\n        serverMessage = await response.text();\n      } catch (e) {\n        // ignore\n      }\n      console.error(\"[LoginLayout] Challenge request failed\", response.status, serverMessage);\n      throw new Error(translate(\"loginErrorChallenge\"));\n    }\n\n    return response.json();\n  }\n\n  async submitLogin(email, challengeID, signature) {\n    const response = await fetch(\"/auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email,\n        challenge_id: challengeID,\n        signature,\n      }),\n    });\n\n    if (!response.ok) {\n      let serverMessage = \"\";\n      try {\n        serverMessage = await response.text();\n      } catch (e) {\n        // ignore\n      }\n      console.error(\"[LoginLayout] Login submission failed\", response.status, serverMessage);\n      throw new Error(translate(\"loginErrorGeneric\"));\n    }\n\n    return response.json();\n  }\n\n  showError(message) {\n    if (this.errorElement) {\n      this.errorElement.textContent = message;\n      this.errorElement.classList.remove(\"hidden\");\n    }\n  }\n\n  hideError() {\n    if (this.errorElement) {\n      this.errorElement.textContent = \"\";\n      this.errorElement.classList.add(\"hidden\");\n    }\n  }\n\n  setSubmitLabel(key) {\n    if (!this.submitButton) {\n      return;\n    }\n    const label = this.submitButton.querySelector('[data-type=\"lang\"]');\n    const text = translate(key);\n    if (label) {\n      label.textContent = text;\n    } else {\n      this.submitButton.textContent = text;\n    }\n  }\n\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n}\n\ncustomElements.define(\"login-layout\", LoginLayoutElement);\n"],
  "mappings": "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",
  "names": []
}
