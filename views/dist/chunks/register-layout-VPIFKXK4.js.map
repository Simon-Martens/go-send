{
  "version": 3,
  "sources": ["../../src/ui/register-layout.mjs"],
  "sourcesContent": ["import { translateElement, translate } from \"../utils.mjs\";\nimport {\n  DEFAULT_KDF_SETTINGS,\n  deriveKeyPair,\n  encodePublicKey,\n  encodeSalt,\n  generateSalt,\n  serializeKDFSettings,\n} from \"../crypto/credentials.mjs\";\n\n/**\n * <register-layout> - User registration form\n *\n * Responsibilities:\n * - Displays registration form (name, email, password, password confirm)\n * - Handles password visibility toggling\n * - Validates passwords match\n * - Extracts token from URL\n * - Will trigger registration flow (to be implemented)\n *\n * Note: Client-side crypto logic will be added later to derive\n * private/public keys from password using Web Crypto API\n */\nclass RegisterLayoutElement extends HTMLElement {\n  constructor() {\n    super();\n\n    // Form elements (will be populated in connectedCallback)\n    this.form = null;\n    this.nameInput = null;\n    this.emailInput = null;\n    this.passwordInput = null;\n    this.passwordConfirmInput = null;\n    this.errorElement = null;\n    this.submitButton = null;\n\n    // Password visibility toggles\n    this.passwordToggle = null;\n    this.passwordConfirmToggle = null;\n\n    // Token extracted from URL\n    this.token = null;\n    this.registerType = 'admin'; // 'admin' or 'user'\n\n    this._postMountFrame = null;\n    this._templateMounted = false;\n    this._handlersBound = false;\n\n    // Bound event handlers\n    this._boundHandlers = {\n      submit: this.handleSubmit.bind(this),\n      togglePassword: this.togglePasswordVisibility.bind(this),\n      togglePasswordConfirm: this.togglePasswordConfirmVisibility.bind(this),\n    };\n  }\n\n  connectedCallback() {\n    // Mount template first (synchronous)\n    if (!this._templateMounted) {\n      const template = document.getElementById(\"register-layout\");\n      if (!template) {\n        console.error(\"Template #register-layout not found\");\n        return;\n      }\n\n      const content = template.content.cloneNode(true);\n      this.appendChild(content);\n      this._templateMounted = true;\n    }\n\n    if (this._postMountFrame !== null) {\n      cancelAnimationFrame(this._postMountFrame);\n    }\n\n    // Schedule async initialization\n    this._postMountFrame = requestAnimationFrame(() => {\n      this._postMountFrame = null;\n      if (!this.isConnected) {\n        return;\n      }\n\n      translateElement(this);\n\n      // Extract token from URL path\n      this.extractToken();\n\n      // Get form elements\n      this.form = this.querySelector('[data-role=\"register-form\"]');\n      this.nameInput = this.querySelector('[data-role=\"name-input\"]');\n      this.emailInput = this.querySelector('[data-role=\"email-input\"]');\n      this.passwordInput = this.querySelector('[data-role=\"password-input\"]');\n      this.passwordConfirmInput = this.querySelector('[data-role=\"password-confirm-input\"]');\n      this.errorElement = this.querySelector('[data-role=\"error\"]');\n      this.submitButton = this.querySelector('[data-role=\"submit\"]');\n      this.passwordToggle = this.querySelector('[data-role=\"toggle-password\"]');\n      this.passwordConfirmToggle = this.querySelector('[data-role=\"toggle-password-confirm\"]');\n\n      // Update title and description based on register type\n      const titleSpan = this.querySelector('[data-role=\"register-title\"] span');\n      const descriptionSpan = this.querySelector('[data-role=\"register-description\"] span');\n\n      if (titleSpan && descriptionSpan) {\n        if (this.registerType === 'admin') {\n          // Already shows admin text from template\n          titleSpan.id = 'registerAdminTitle';\n          descriptionSpan.id = 'registerAdminDescription';\n        } else {\n          // Change to user text\n          titleSpan.id = 'registerUserTitle';\n          descriptionSpan.id = 'registerUserDescription';\n        }\n        // Re-translate after changing IDs\n        translateElement(this);\n      }\n\n      // Set placeholder translations\n      this.setPlaceholders();\n\n      // Bind event handlers\n      if (!this._handlersBound && this.form) {\n        this.form.addEventListener(\"submit\", this._boundHandlers.submit);\n\n        if (this.passwordToggle) {\n          this.passwordToggle.addEventListener(\"click\", this._boundHandlers.togglePassword);\n        }\n\n        if (this.passwordConfirmToggle) {\n          this.passwordConfirmToggle.addEventListener(\"click\", this._boundHandlers.togglePasswordConfirm);\n        }\n\n        // Add input event listeners for real-time validation\n        if (this.nameInput) {\n          this.nameInput.addEventListener(\"input\", () => this.validateForm());\n        }\n\n        if (this.emailInput) {\n          this.emailInput.addEventListener(\"input\", () => this.validateForm());\n        }\n\n        if (this.passwordInput) {\n          this.passwordInput.addEventListener(\"input\", () => this.validateForm());\n        }\n\n        if (this.passwordConfirmInput) {\n          this.passwordConfirmInput.addEventListener(\"input\", () => this.validateForm());\n        }\n\n        this._handlersBound = true;\n      }\n\n      // Initial validation state\n      this.validateForm();\n\n      console.log(\"[RegisterLayout] Initialized\", {\n        token: this.token ? this.token.substring(0, 8) + \"...\" : null,\n        type: this.registerType\n      });\n    });\n  }\n\n  disconnectedCallback() {\n    if (this._postMountFrame !== null) {\n      cancelAnimationFrame(this._postMountFrame);\n      this._postMountFrame = null;\n    }\n\n    if (this._handlersBound && this.form) {\n      this.form.removeEventListener(\"submit\", this._boundHandlers.submit);\n\n      if (this.passwordToggle) {\n        this.passwordToggle.removeEventListener(\"click\", this._boundHandlers.togglePassword);\n      }\n\n      if (this.passwordConfirmToggle) {\n        this.passwordConfirmToggle.removeEventListener(\"click\", this._boundHandlers.togglePasswordConfirm);\n      }\n\n      this._handlersBound = false;\n    }\n  }\n\n  /**\n   * Extract token from URL path\n   * Expected paths: /register/admin/[token] or /register/[token]\n   */\n  extractToken() {\n    const path = window.location.pathname;\n    const parts = path.split('/').filter(p => p);\n\n    // /register/admin/[token]\n    if (parts[0] === 'register' && parts[1] === 'admin' && parts[2]) {\n      this.token = parts[2];\n      this.registerType = 'admin';\n    }\n    // /register/[token] (for regular users)\n    else if (parts[0] === 'register' && parts[1]) {\n      this.token = parts[1];\n      this.registerType = 'user';\n    }\n    // No token found\n    else {\n      console.warn(\"[RegisterLayout] No token found in URL:\", path);\n      this.showError(\"Invalid registration link. Please use the link provided in your email.\");\n    }\n  }\n\n  /**\n   * Toggle password field visibility\n   */\n  togglePasswordVisibility(event) {\n    event.preventDefault();\n\n    if (!this.passwordInput) return;\n\n    if (this.passwordInput.type === \"password\") {\n      this.passwordInput.type = \"text\";\n    } else {\n      this.passwordInput.type = \"password\";\n    }\n  }\n\n  /**\n   * Toggle password confirmation field visibility\n   */\n  togglePasswordConfirmVisibility(event) {\n    event.preventDefault();\n\n    if (!this.passwordConfirmInput) return;\n\n    if (this.passwordConfirmInput.type === \"password\") {\n      this.passwordConfirmInput.type = \"text\";\n    } else {\n      this.passwordConfirmInput.type = \"password\";\n    }\n  }\n\n  /**\n   * Handle form submission\n   * Derives crypto keys from password and registers user with server\n   */\n  async handleSubmit(event) {\n    event.preventDefault();\n\n    // Clear any previous errors\n    this.hideError();\n\n    // Get form values\n    const name = this.nameInput?.value.trim();\n    const email = this.emailInput?.value.trim();\n    const password = this.passwordInput?.value;\n    const passwordConfirm = this.passwordConfirmInput?.value;\n\n    if (!name) {\n      this.showError(translate(\"registerErrorNameRequired\"));\n      return;\n    }\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      this.showError(translate(\"authErrorInvalidEmail\"));\n      return;\n    }\n\n    // Validate password length\n    if (password.length < 10) {\n      this.showError(translate(\"authErrorPasswordLength\"));\n      return;\n    }\n\n    // Validate passwords match\n    if (password !== passwordConfirm) {\n      this.showError(translate(\"registerErrorPasswordsMismatch\"));\n      return;\n    }\n\n    // Validate token exists\n    if (!this.token) {\n      this.showError(translate(\"registerErrorMissingToken\"));\n      return;\n    }\n\n    if (!window.crypto || !window.crypto.subtle) {\n      this.showError(translate(\"authErrorCryptoUnsupported\"));\n      return;\n    }\n\n    // Disable submit button during processing\n    if (this.submitButton) {\n      this.submitButton.disabled = true;\n      this.setSubmitLabel(\"registerSubmitting\");\n    }\n\n    let saltBytes;\n    let seed;\n    try {\n      console.log(\"[RegisterLayout] Deriving credentials\");\n      saltBytes = generateSalt();\n      let publicKey;\n      try {\n        ({ seed, publicKey } = await deriveKeyPair(password, saltBytes, DEFAULT_KDF_SETTINGS));\n      } finally {\n        // Always clear the password string once the derivation finished\n        this.passwordInput.value = \"\";\n        this.passwordConfirmInput.value = \"\";\n      }\n\n      const salt = encodeSalt(saltBytes);\n      const publicKeyB64 = encodePublicKey(publicKey);\n      const kdfSettings = serializeKDFSettings(DEFAULT_KDF_SETTINGS);\n\n      // Zero sensitive buffers\n      console.log(\"[RegisterLayout] Sending registration request\");\n\n      // Send registration request to server\n      const endpoint = this.registerType === 'admin' ? '/register/admin' : '/register/user';\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: this.token,\n          name: name,\n          email: email,\n          salt,\n          public_key: publicKeyB64,\n          kdf: kdfSettings,\n        }),\n      });\n\n      if (!response.ok) {\n        let serverMessage = \"\";\n        try {\n          serverMessage = await response.text();\n        } catch (e) {\n          // Ignore parse errors\n        }\n        console.error(\"[RegisterLayout] Registration request failed\", response.status, serverMessage);\n        throw new Error(translate(\"registerErrorGeneric\"));\n      }\n\n      const data = await response.json();\n      console.log(\"[RegisterLayout] Registration successful\", { userId: data.id, email: data.email });\n\n      // Show success screen\n      this.showSuccess(name);\n\n    } catch (error) {\n      console.error(\"[RegisterLayout] Registration failed\", error);\n      this.showError(error.message || translate(\"registerErrorGeneric\"));\n\n      // Re-enable submit button\n      if (this.submitButton) {\n        this.submitButton.disabled = false;\n        this.setSubmitLabel(\"registerSubmitButton\");\n      }\n    }\n    finally {\n      if (seed) seed.fill(0);\n      if (saltBytes) saltBytes.fill(0);\n    }\n  }\n\n  /**\n   * Show success screen after registration\n   */\n  async showSuccess(name) {\n    // Replace form with success message\n    const container = this.querySelector('section > div');\n    if (!container) return;\n\n    // Get the success template\n    const template = document.getElementById(\"register-success\");\n    if (!template) {\n      console.error(\"Template #register-success not found\");\n      return;\n    }\n\n    // Clear container and mount success template\n    container.innerHTML = '';\n    const content = template.content.cloneNode(true);\n\n    // Import translation function\n    const { translate, translateElement } = await import(\"../utils.mjs\");\n\n    // Set the dynamic success message\n    const messageElement = content.querySelector('[data-role=\"success-message\"]');\n    if (messageElement) {\n      messageElement.textContent = translate('registerSuccessMessage', { name });\n    }\n\n    // Bind button click handler\n    const goHomeButton = content.querySelector('[data-action=\"go-home\"]');\n    if (goHomeButton) {\n      goHomeButton.addEventListener('click', () => {\n        window.location.href = '/';\n      });\n    }\n\n    // Append content to container\n    container.appendChild(content);\n\n    // Translate the static elements\n    translateElement(container);\n  }\n\n  /**\n   * Validate the entire form and enable/disable submit button\n   */\n  validateForm() {\n    const name = this.nameInput?.value.trim();\n    const email = this.emailInput?.value.trim();\n    const password = this.passwordInput?.value;\n    const passwordConfirm = this.passwordConfirmInput?.value;\n\n    // Check all conditions\n    const nameValid = name && name.length > 0;\n    const emailValid = email && this.isValidEmail(email);\n    const passwordValid = password && password.length >= 10;\n    const passwordsMatch = password === passwordConfirm;\n    const passwordConfirmValid = passwordConfirm && passwordConfirm.length >= 10;\n\n    const allValid = nameValid && emailValid && passwordValid && passwordsMatch && passwordConfirmValid;\n\n    // Enable/disable submit button\n    if (this.submitButton) {\n      this.submitButton.disabled = !allValid;\n    }\n\n    return allValid;\n  }\n\n  /**\n   * Set translated placeholders for input fields\n   */\n  async setPlaceholders() {\n    try {\n      const { translate } = await import(\"../utils.mjs\");\n\n      const nameInput = this.querySelector('[data-placeholder-key=\"registerNamePlaceholder\"]');\n      const emailInput = this.querySelector('[data-placeholder-key=\"registerEmailPlaceholder\"]');\n\n      if (nameInput) {\n        nameInput.placeholder = translate('registerNamePlaceholder');\n      }\n\n      if (emailInput) {\n        emailInput.placeholder = translate('registerEmailPlaceholder');\n      }\n    } catch (e) {\n      console.warn('Could not translate placeholders', e);\n    }\n  }\n\n  /**\n   * Validate email format\n   */\n  isValidEmail(email) {\n    // Basic email validation regex\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * Show error message\n   */\n  showError(message) {\n    if (this.errorElement) {\n      this.errorElement.textContent = message;\n      this.errorElement.classList.remove(\"hidden\");\n    }\n  }\n\n  /**\n   * Hide error message\n   */\n  hideError() {\n    if (this.errorElement) {\n      this.errorElement.textContent = \"\";\n      this.errorElement.classList.add(\"hidden\");\n    }\n  }\n\n  setSubmitLabel(key) {\n    if (!this.submitButton) {\n      return;\n    }\n    const label = this.submitButton.querySelector('[data-type=\"lang\"]');\n    const text = translate(key);\n    if (label) {\n      label.textContent = text;\n    } else {\n      this.submitButton.textContent = text;\n    }\n  }\n}\n\n// Register the custom element\ncustomElements.define(\"register-layout\", RegisterLayoutElement);\n"],
  "mappings": "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",
  "names": ["translate", "translateElement"]
}
